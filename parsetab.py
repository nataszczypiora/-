
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALL ANY ASC BETWEEN BY COMMA DESC DISTINCT EMPTY_STRING END EQUAL FROM FULL GROUP HAVING IN INNER JOIN LEFT LESS LESS_EQ LIKE LIMIT L_PARENTIS MINUS MORE MORE_EQ NEWID NOT NOT_EQUAL NULL NUMBER OFFSET ON ORDER OUTER PLUS QUOTE REGEX RIGHT R_PARENTIS SELECT TOP UNDERSCORE VARIABLE WHERE\n            program : select_tree END\n                | program select_tree END\n        \n            select_tree : SELECT ARGS FROM_PARSE\n                | SELECT TOP_C FROM_PARSE\n                | SELECT ALL FROM_PARSE\n        \n            FROM_PARSE : FROM ARGS\n                | FROM ARGS ADDITIONAL_CLAUSES\n        \n            ADDITIONAL_CLAUSES : JOIN_C ADDITIONAL_CLAUSES\n                | WHERE_C ADDITIONAL_CLAUSES\n                | GROUP_BY_C ADDITIONAL_CLAUSES\n                | HAVING_C ADDITIONAL_CLAUSES\n                | ORDER_BY_C ADDITIONAL_CLAUSES\n                | LIMIT_C ADDITIONAL_CLAUSES\n                | OFFSET_C ADDITIONAL_CLAUSES\n                | JOIN_C\n                | WHERE_C\n                | GROUP_BY_C\n                | HAVING_C\n                | ORDER_BY_C\n                | LIMIT_C\n                | OFFSET_C\n        \n            JOIN_C : INNER JOIN_C\n                | LEFT JOIN_C\n                | RIGHT JOIN_C\n                | FULL JOIN_C\n                | OUTER JOIN_C\n                | JOIN ARGS JOIN_C\n                | ON VARIABLE\n                | ON VARIABLE EQUAL VARIABLE\n        \n            WHERE_C : WHERE CONDITION\n        \n            HAVING_C : HAVING CONDITION\n        \n            CONDITION : VARIABLE OPERATOR MATCH\n        \n            MATCH : QUOTE ANY QUOTE\n                | VARIABLE\n                | EMPTY_STRING\n        \n            GROUP_BY_C : GROUP BY VARIABLE\n        \n            INNER_SELECT_C : L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS\n        \n            ORDER_BY_C : ORDER BY VARIABLE\n                | ORDER BY VARIABLE DESC\n                | ORDER BY VARIABLE ASC\n                | ORDER BY NEWID_C\n        \n            LIMIT_C : LIMIT NUMBER\n        \n            OFFSET_C : OFFSET NUMBER\n        \n            ARGS : ARGS COMMA VARIABLE\n                | ARGS VARIABLE\n                | DISTINCT VARIABLE\n                | INNER_SELECT_C\n                | VARIABLE\n        \n            OPERATOR : LESS\n                | MORE\n                | EQUAL\n                | NOT_EQUAL\n                | MORE_EQ\n                | LESS_EQ\n                | BETWEEN\n                | LIKE\n                | IN\n                | REGEX\n        \n            NEWID_C : NEWID L_PARENTIS R_PARENTIS\n        \n            TOP_C : TOP NUMBER ARGS\n        '
    
_lr_action_items = {'SELECT':([0,1,5,13,14,],[3,3,-1,23,-2,]),'$end':([1,5,14,],[0,-1,-2,]),'END':([2,4,9,11,15,17,19,20,21,24,25,28,29,30,31,32,33,34,35,50,51,52,53,54,55,56,57,58,59,60,61,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[5,14,-48,-47,-3,-45,-4,-5,-46,-44,-6,-7,-15,-16,-17,-18,-19,-20,-21,-8,-9,-10,-11,-12,-13,-14,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'ALL':([3,],[8,]),'DISTINCT':([3,18,22,23,41,],[10,10,10,10,10,]),'VARIABLE':([3,6,9,10,11,16,17,18,21,22,23,24,25,26,27,41,42,43,45,62,66,68,71,73,74,75,76,77,78,79,80,81,82,83,84,],[9,17,-48,21,-47,24,-45,9,-46,9,9,-44,17,17,17,9,63,65,65,17,85,86,-37,89,90,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,]),'TOP':([3,],[12,]),'L_PARENTIS':([3,18,22,23,41,88,],[13,13,13,13,13,96,]),'COMMA':([6,9,11,17,21,24,25,26,27,62,71,],[16,-48,-47,-45,-46,-44,16,16,16,16,-37,]),'FROM':([6,7,8,9,11,17,21,24,26,27,71,],[18,18,18,-48,-47,-45,-46,-44,-60,18,-37,]),'INNER':([9,11,17,21,24,25,29,30,31,32,33,34,35,36,37,38,39,40,57,58,59,60,61,62,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,36,36,36,36,36,36,36,36,36,36,36,36,36,-22,-23,-24,-25,-26,36,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'LEFT':([9,11,17,21,24,25,29,30,31,32,33,34,35,36,37,38,39,40,57,58,59,60,61,62,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,37,37,37,37,37,37,37,37,37,37,37,37,37,-22,-23,-24,-25,-26,37,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'RIGHT':([9,11,17,21,24,25,29,30,31,32,33,34,35,36,37,38,39,40,57,58,59,60,61,62,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,38,38,38,38,38,38,38,38,38,38,38,38,38,-22,-23,-24,-25,-26,38,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'FULL':([9,11,17,21,24,25,29,30,31,32,33,34,35,36,37,38,39,40,57,58,59,60,61,62,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,39,39,39,39,39,39,39,39,39,39,39,39,39,-22,-23,-24,-25,-26,39,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'OUTER':([9,11,17,21,24,25,29,30,31,32,33,34,35,36,37,38,39,40,57,58,59,60,61,62,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,40,40,40,40,40,40,40,40,40,40,40,40,40,-22,-23,-24,-25,-26,40,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'JOIN':([9,11,17,21,24,25,29,30,31,32,33,34,35,36,37,38,39,40,57,58,59,60,61,62,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,41,41,41,41,41,41,41,41,41,41,41,41,41,-22,-23,-24,-25,-26,41,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'ON':([9,11,17,21,24,25,29,30,31,32,33,34,35,36,37,38,39,40,57,58,59,60,61,62,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,42,42,42,42,42,42,42,42,42,42,42,42,42,-22,-23,-24,-25,-26,42,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'WHERE':([9,11,17,21,24,25,29,30,31,32,33,34,35,57,58,59,60,61,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,43,43,43,43,43,43,43,43,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'GROUP':([9,11,17,21,24,25,29,30,31,32,33,34,35,57,58,59,60,61,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,44,44,44,44,44,44,44,44,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'HAVING':([9,11,17,21,24,25,29,30,31,32,33,34,35,57,58,59,60,61,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,45,45,45,45,45,45,45,45,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'ORDER':([9,11,17,21,24,25,29,30,31,32,33,34,35,57,58,59,60,61,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,46,46,46,46,46,46,46,46,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'LIMIT':([9,11,17,21,24,25,29,30,31,32,33,34,35,57,58,59,60,61,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,47,47,47,47,47,47,47,47,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'OFFSET':([9,11,17,21,24,25,29,30,31,32,33,34,35,57,58,59,60,61,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,98,99,],[-48,-47,-45,-46,-44,48,48,48,48,48,48,48,48,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-59,-33,]),'R_PARENTIS':([9,11,17,21,24,25,28,29,30,31,32,33,34,35,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,67,69,70,71,72,85,86,87,89,90,91,93,94,95,96,98,99,],[-48,-47,-45,-46,-44,-6,-7,-15,-16,-17,-18,-19,-20,-21,71,-8,-9,-10,-11,-12,-13,-14,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,98,-59,-33,]),'NUMBER':([12,47,48,],[22,69,70,]),'BY':([44,46,],[66,68,]),'EQUAL':([63,65,],[73,77,]),'LESS':([65,],[75,]),'MORE':([65,],[76,]),'NOT_EQUAL':([65,],[78,]),'MORE_EQ':([65,],[79,]),'LESS_EQ':([65,],[80,]),'BETWEEN':([65,],[81,]),'LIKE':([65,],[82,]),'IN':([65,],[83,]),'REGEX':([65,],[84,]),'NEWID':([68,],[88,]),'QUOTE':([74,75,76,77,78,79,80,81,82,83,84,97,],[92,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,99,]),'EMPTY_STRING':([74,75,76,77,78,79,80,81,82,83,84,],[93,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,]),'DESC':([86,],[94,]),'ASC':([86,],[95,]),'ANY':([92,],[97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'select_tree':([0,1,],[2,4,]),'ARGS':([3,18,22,23,41,],[6,25,26,27,62,]),'TOP_C':([3,],[7,]),'INNER_SELECT_C':([3,18,22,23,41,],[11,11,11,11,11,]),'FROM_PARSE':([6,7,8,27,],[15,19,20,49,]),'ADDITIONAL_CLAUSES':([25,29,30,31,32,33,34,35,],[28,50,51,52,53,54,55,56,]),'JOIN_C':([25,29,30,31,32,33,34,35,36,37,38,39,40,62,],[29,29,29,29,29,29,29,29,57,58,59,60,61,72,]),'WHERE_C':([25,29,30,31,32,33,34,35,],[30,30,30,30,30,30,30,30,]),'GROUP_BY_C':([25,29,30,31,32,33,34,35,],[31,31,31,31,31,31,31,31,]),'HAVING_C':([25,29,30,31,32,33,34,35,],[32,32,32,32,32,32,32,32,]),'ORDER_BY_C':([25,29,30,31,32,33,34,35,],[33,33,33,33,33,33,33,33,]),'LIMIT_C':([25,29,30,31,32,33,34,35,],[34,34,34,34,34,34,34,34,]),'OFFSET_C':([25,29,30,31,32,33,34,35,],[35,35,35,35,35,35,35,35,]),'CONDITION':([43,45,],[64,67,]),'OPERATOR':([65,],[74,]),'NEWID_C':([68,],[87,]),'MATCH':([74,],[91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> select_tree END','program',2,'p_program','SQLLexer.py',100),
  ('program -> program select_tree END','program',3,'p_program','SQLLexer.py',101),
  ('select_tree -> SELECT ARGS FROM_PARSE','select_tree',3,'p_select','SQLLexer.py',107),
  ('select_tree -> SELECT TOP_C FROM_PARSE','select_tree',3,'p_select','SQLLexer.py',108),
  ('select_tree -> SELECT ALL FROM_PARSE','select_tree',3,'p_select','SQLLexer.py',109),
  ('FROM_PARSE -> FROM ARGS','FROM_PARSE',2,'p_FROM_PARSE','SQLLexer.py',115),
  ('FROM_PARSE -> FROM ARGS ADDITIONAL_CLAUSES','FROM_PARSE',3,'p_FROM_PARSE','SQLLexer.py',116),
  ('ADDITIONAL_CLAUSES -> JOIN_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',122),
  ('ADDITIONAL_CLAUSES -> WHERE_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',123),
  ('ADDITIONAL_CLAUSES -> GROUP_BY_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',124),
  ('ADDITIONAL_CLAUSES -> HAVING_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',125),
  ('ADDITIONAL_CLAUSES -> ORDER_BY_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',126),
  ('ADDITIONAL_CLAUSES -> LIMIT_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',127),
  ('ADDITIONAL_CLAUSES -> OFFSET_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',128),
  ('ADDITIONAL_CLAUSES -> JOIN_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',129),
  ('ADDITIONAL_CLAUSES -> WHERE_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',130),
  ('ADDITIONAL_CLAUSES -> GROUP_BY_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',131),
  ('ADDITIONAL_CLAUSES -> HAVING_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',132),
  ('ADDITIONAL_CLAUSES -> ORDER_BY_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',133),
  ('ADDITIONAL_CLAUSES -> LIMIT_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',134),
  ('ADDITIONAL_CLAUSES -> OFFSET_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',135),
  ('JOIN_C -> INNER JOIN_C','JOIN_C',2,'p_JOIN_C','SQLLexer.py',141),
  ('JOIN_C -> LEFT JOIN_C','JOIN_C',2,'p_JOIN_C','SQLLexer.py',142),
  ('JOIN_C -> RIGHT JOIN_C','JOIN_C',2,'p_JOIN_C','SQLLexer.py',143),
  ('JOIN_C -> FULL JOIN_C','JOIN_C',2,'p_JOIN_C','SQLLexer.py',144),
  ('JOIN_C -> OUTER JOIN_C','JOIN_C',2,'p_JOIN_C','SQLLexer.py',145),
  ('JOIN_C -> JOIN ARGS JOIN_C','JOIN_C',3,'p_JOIN_C','SQLLexer.py',146),
  ('JOIN_C -> ON VARIABLE','JOIN_C',2,'p_JOIN_C','SQLLexer.py',147),
  ('JOIN_C -> ON VARIABLE EQUAL VARIABLE','JOIN_C',4,'p_JOIN_C','SQLLexer.py',148),
  ('WHERE_C -> WHERE CONDITION','WHERE_C',2,'p_WHERE_C','SQLLexer.py',154),
  ('HAVING_C -> HAVING CONDITION','HAVING_C',2,'p_HAVING_C','SQLLexer.py',160),
  ('CONDITION -> VARIABLE OPERATOR MATCH','CONDITION',3,'p_CONDITION','SQLLexer.py',166),
  ('MATCH -> QUOTE ANY QUOTE','MATCH',3,'p_MATCH','SQLLexer.py',172),
  ('MATCH -> VARIABLE','MATCH',1,'p_MATCH','SQLLexer.py',173),
  ('MATCH -> EMPTY_STRING','MATCH',1,'p_MATCH','SQLLexer.py',174),
  ('GROUP_BY_C -> GROUP BY VARIABLE','GROUP_BY_C',3,'p_GROUP_BY_C','SQLLexer.py',180),
  ('INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS','INNER_SELECT_C',5,'p_INNER_SELECT_C','SQLLexer.py',186),
  ('ORDER_BY_C -> ORDER BY VARIABLE','ORDER_BY_C',3,'p_ORDER_BY_C','SQLLexer.py',192),
  ('ORDER_BY_C -> ORDER BY VARIABLE DESC','ORDER_BY_C',4,'p_ORDER_BY_C','SQLLexer.py',193),
  ('ORDER_BY_C -> ORDER BY VARIABLE ASC','ORDER_BY_C',4,'p_ORDER_BY_C','SQLLexer.py',194),
  ('ORDER_BY_C -> ORDER BY NEWID_C','ORDER_BY_C',3,'p_ORDER_BY_C','SQLLexer.py',195),
  ('LIMIT_C -> LIMIT NUMBER','LIMIT_C',2,'p_LIMIT_C','SQLLexer.py',201),
  ('OFFSET_C -> OFFSET NUMBER','OFFSET_C',2,'p_OFFSET_C','SQLLexer.py',207),
  ('ARGS -> ARGS COMMA VARIABLE','ARGS',3,'p_ARG_LIST','SQLLexer.py',213),
  ('ARGS -> ARGS VARIABLE','ARGS',2,'p_ARG_LIST','SQLLexer.py',214),
  ('ARGS -> DISTINCT VARIABLE','ARGS',2,'p_ARG_LIST','SQLLexer.py',215),
  ('ARGS -> INNER_SELECT_C','ARGS',1,'p_ARG_LIST','SQLLexer.py',216),
  ('ARGS -> VARIABLE','ARGS',1,'p_ARG_LIST','SQLLexer.py',217),
  ('OPERATOR -> LESS','OPERATOR',1,'p_OPERATOR','SQLLexer.py',223),
  ('OPERATOR -> MORE','OPERATOR',1,'p_OPERATOR','SQLLexer.py',224),
  ('OPERATOR -> EQUAL','OPERATOR',1,'p_OPERATOR','SQLLexer.py',225),
  ('OPERATOR -> NOT_EQUAL','OPERATOR',1,'p_OPERATOR','SQLLexer.py',226),
  ('OPERATOR -> MORE_EQ','OPERATOR',1,'p_OPERATOR','SQLLexer.py',227),
  ('OPERATOR -> LESS_EQ','OPERATOR',1,'p_OPERATOR','SQLLexer.py',228),
  ('OPERATOR -> BETWEEN','OPERATOR',1,'p_OPERATOR','SQLLexer.py',229),
  ('OPERATOR -> LIKE','OPERATOR',1,'p_OPERATOR','SQLLexer.py',230),
  ('OPERATOR -> IN','OPERATOR',1,'p_OPERATOR','SQLLexer.py',231),
  ('OPERATOR -> REGEX','OPERATOR',1,'p_OPERATOR','SQLLexer.py',232),
  ('NEWID_C -> NEWID L_PARENTIS R_PARENTIS','NEWID_C',3,'p_NEWID_C','SQLLexer.py',238),
  ('TOP_C -> TOP NUMBER ARGS','TOP_C',3,'p_TOP_C','SQLLexer.py',244),
]
