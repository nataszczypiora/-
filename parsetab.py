
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALL ANY ASC BETWEEN BY COMMA COUNT DASH DESC DISTINCT DOLLAR DOUBLE_DOTS EMPTY_STRING END EQUAL FENCE FROM FULL GERUND GROUP HASH HAT HAVING IN INNER JOIN LEFT LESS LESS_EQ LIKE LIMIT LINUX_HOME L_BRACE L_PARENTIS L_SQUARE_PARENTIS MINUS MORE MORE_EQ NEWID NOT NOT_EQUAL NULL NUMBER OFFSET ON ORDER OUTER PLUS QUESTION_MARK QUOTE REGEX RIGHT R_BRACE R_PARENTIS R_SQUARE_PARENTIS SCREAM SELECT SINGLE_CHAR SLASH TOP UNDERSCORE VARIABLE WHERE\n            program : select_tree END\n                | program select_tree END\n        \n            select_tree : SELECT ARGS FROM_PARSE\n                | SELECT TOP_C FROM_PARSE\n                | SELECT ALL FROM_PARSE\n        \n            FROM_PARSE : FROM ARGS\n                | FROM ARGS ADDITIONAL_CLAUSES\n        \n            ADDITIONAL_CLAUSES : JOIN_C ADDITIONAL_CLAUSES\n                | WHERE_C ADDITIONAL_CLAUSES\n                | GROUP_BY_C ADDITIONAL_CLAUSES\n                | HAVING_C ADDITIONAL_CLAUSES\n                | ORDER_BY_C ADDITIONAL_CLAUSES\n                | LIMIT_C ADDITIONAL_CLAUSES\n                | OFFSET_C ADDITIONAL_CLAUSES\n                | JOIN_C\n                | WHERE_C\n                | GROUP_BY_C\n                | HAVING_C\n                | ORDER_BY_C\n                | LIMIT_C\n                | OFFSET_C\n        \n            JOIN_C : INNER JOIN_C\n                | LEFT JOIN_C\n                | RIGHT JOIN_C\n                | FULL JOIN_C\n                | OUTER JOIN_C\n                | JOIN ARGS JOIN_C\n                | ON VARIABLE\n                | ON VARIABLE EQUAL VARIABLE\n        \n            WHERE_C : WHERE CONDITION\n        \n            HAVING_C : HAVING CONDITION\n        \n            CONDITION : VARIABLE OPERATOR MATCH\n        \n            MATCH : QUOTE ANY QUOTE\n                | VARIABLE\n                | EMPTY_STRING\n        \n            GROUP_BY_C : GROUP BY VARIABLE\n        \n            INNER_SELECT_C : L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS\n        \n            ORDER_BY_C : ORDER BY VARIABLE\n                | ORDER BY VARIABLE DESC\n                | ORDER BY VARIABLE ASC\n                | ORDER BY NEWID_C\n        \n            LIMIT_C : LIMIT NUMBER\n        \n            OFFSET_C : OFFSET NUMBER\n        \n            ARGS : ARGS COMMA VARIABLE\n                | ARGS VARIABLE\n                | DISTINCT VARIABLE\n                | INNER_SELECT_C\n                | VARIABLE\n                | P_COUNT\n        \n            P_COUNT : COUNT L_PARENTIS ALL R_PARENTIS\n                | COUNT VARIABLE\n        \n            OPERATOR : LESS\n                | MORE\n                | EQUAL\n                | NOT_EQUAL\n                | MORE_EQ\n                | LESS_EQ\n                | BETWEEN\n                | LIKE\n                | IN\n                | REGEX\n        \n            NEWID_C : NEWID L_PARENTIS R_PARENTIS\n        \n            TOP_C : TOP NUMBER ARGS\n        '
    
_lr_action_items = {'SELECT':([0,1,5,14,16,],[3,3,-1,25,-2,]),'$end':([1,5,16,],[0,-1,-2,]),'END':([2,4,9,11,12,17,19,21,22,23,27,28,29,33,34,35,36,37,38,39,40,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[5,16,-48,-47,-49,-3,-45,-4,-5,-46,-51,-44,-6,-7,-15,-16,-17,-18,-19,-20,-21,-50,-8,-9,-10,-11,-12,-13,-14,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'ALL':([3,26,],[8,32,]),'DISTINCT':([3,20,24,25,46,],[10,10,10,10,10,]),'VARIABLE':([3,6,9,10,11,12,15,18,19,20,23,24,25,27,28,29,30,31,46,47,48,50,55,68,72,74,77,79,80,81,82,83,84,85,86,87,88,89,90,],[9,19,-48,23,-47,-49,27,28,-45,9,-46,9,9,-51,-44,19,19,19,9,69,71,71,-50,19,91,92,-37,95,96,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,]),'TOP':([3,],[13,]),'L_PARENTIS':([3,15,20,24,25,46,94,],[14,26,14,14,14,14,102,]),'COUNT':([3,20,24,25,46,],[15,15,15,15,15,]),'COMMA':([6,9,11,12,19,23,27,28,29,30,31,55,68,77,],[18,-48,-47,-49,-45,-46,-51,-44,18,18,18,-50,18,-37,]),'FROM':([6,7,8,9,11,12,19,23,27,28,30,31,55,77,],[20,20,20,-48,-47,-49,-45,-46,-51,-44,-63,20,-50,-37,]),'INNER':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,55,63,64,65,66,67,68,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,41,41,41,41,41,41,41,41,41,41,41,41,41,-50,-22,-23,-24,-25,-26,41,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'LEFT':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,55,63,64,65,66,67,68,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,42,42,42,42,42,42,42,42,42,42,42,42,42,-50,-22,-23,-24,-25,-26,42,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'RIGHT':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,55,63,64,65,66,67,68,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,43,43,43,43,43,43,43,43,43,43,43,43,43,-50,-22,-23,-24,-25,-26,43,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'FULL':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,55,63,64,65,66,67,68,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,44,44,44,44,44,44,44,44,44,44,44,44,44,-50,-22,-23,-24,-25,-26,44,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'OUTER':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,55,63,64,65,66,67,68,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,45,45,45,45,45,45,45,45,45,45,45,45,45,-50,-22,-23,-24,-25,-26,45,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'JOIN':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,55,63,64,65,66,67,68,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,46,46,46,46,46,46,46,46,46,46,46,46,46,-50,-22,-23,-24,-25,-26,46,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'ON':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,55,63,64,65,66,67,68,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,47,47,47,47,47,47,47,47,47,47,47,47,47,-50,-22,-23,-24,-25,-26,47,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'WHERE':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,55,63,64,65,66,67,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,48,48,48,48,48,48,48,48,-50,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'GROUP':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,55,63,64,65,66,67,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,49,49,49,49,49,49,49,49,-50,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'HAVING':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,55,63,64,65,66,67,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,50,50,50,50,50,50,50,50,-50,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'ORDER':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,55,63,64,65,66,67,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,51,51,51,51,51,51,51,51,-50,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'LIMIT':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,55,63,64,65,66,67,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,52,52,52,52,52,52,52,52,-50,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'OFFSET':([9,11,12,19,23,27,28,29,34,35,36,37,38,39,40,55,63,64,65,66,67,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,104,105,],[-48,-47,-49,-45,-46,-51,-44,53,53,53,53,53,53,53,53,-50,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,-62,-33,]),'R_PARENTIS':([9,11,12,19,23,27,28,29,32,33,34,35,36,37,38,39,40,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,73,75,76,77,78,91,92,93,95,96,97,99,100,101,102,104,105,],[-48,-47,-49,-45,-46,-51,-44,-6,55,-7,-15,-16,-17,-18,-19,-20,-21,77,-50,-8,-9,-10,-11,-12,-13,-14,-22,-23,-24,-25,-26,-28,-30,-31,-42,-43,-37,-27,-36,-38,-41,-29,-34,-32,-35,-39,-40,104,-62,-33,]),'NUMBER':([13,52,53,],[24,75,76,]),'BY':([49,51,],[72,74,]),'EQUAL':([69,71,],[79,83,]),'LESS':([71,],[81,]),'MORE':([71,],[82,]),'NOT_EQUAL':([71,],[84,]),'MORE_EQ':([71,],[85,]),'LESS_EQ':([71,],[86,]),'BETWEEN':([71,],[87,]),'LIKE':([71,],[88,]),'IN':([71,],[89,]),'REGEX':([71,],[90,]),'NEWID':([74,],[94,]),'QUOTE':([80,81,82,83,84,85,86,87,88,89,90,103,],[98,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,105,]),'EMPTY_STRING':([80,81,82,83,84,85,86,87,88,89,90,],[99,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,]),'DESC':([92,],[100,]),'ASC':([92,],[101,]),'ANY':([98,],[103,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'select_tree':([0,1,],[2,4,]),'ARGS':([3,20,24,25,46,],[6,29,30,31,68,]),'TOP_C':([3,],[7,]),'INNER_SELECT_C':([3,20,24,25,46,],[11,11,11,11,11,]),'P_COUNT':([3,20,24,25,46,],[12,12,12,12,12,]),'FROM_PARSE':([6,7,8,31,],[17,21,22,54,]),'ADDITIONAL_CLAUSES':([29,34,35,36,37,38,39,40,],[33,56,57,58,59,60,61,62,]),'JOIN_C':([29,34,35,36,37,38,39,40,41,42,43,44,45,68,],[34,34,34,34,34,34,34,34,63,64,65,66,67,78,]),'WHERE_C':([29,34,35,36,37,38,39,40,],[35,35,35,35,35,35,35,35,]),'GROUP_BY_C':([29,34,35,36,37,38,39,40,],[36,36,36,36,36,36,36,36,]),'HAVING_C':([29,34,35,36,37,38,39,40,],[37,37,37,37,37,37,37,37,]),'ORDER_BY_C':([29,34,35,36,37,38,39,40,],[38,38,38,38,38,38,38,38,]),'LIMIT_C':([29,34,35,36,37,38,39,40,],[39,39,39,39,39,39,39,39,]),'OFFSET_C':([29,34,35,36,37,38,39,40,],[40,40,40,40,40,40,40,40,]),'CONDITION':([48,50,],[70,73,]),'OPERATOR':([71,],[80,]),'NEWID_C':([74,],[93,]),'MATCH':([80,],[97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> select_tree END','program',2,'p_program','SQLLexer.py',133),
  ('program -> program select_tree END','program',3,'p_program','SQLLexer.py',134),
  ('select_tree -> SELECT ARGS FROM_PARSE','select_tree',3,'p_select','SQLLexer.py',140),
  ('select_tree -> SELECT TOP_C FROM_PARSE','select_tree',3,'p_select','SQLLexer.py',141),
  ('select_tree -> SELECT ALL FROM_PARSE','select_tree',3,'p_select','SQLLexer.py',142),
  ('FROM_PARSE -> FROM ARGS','FROM_PARSE',2,'p_FROM_PARSE','SQLLexer.py',148),
  ('FROM_PARSE -> FROM ARGS ADDITIONAL_CLAUSES','FROM_PARSE',3,'p_FROM_PARSE','SQLLexer.py',149),
  ('ADDITIONAL_CLAUSES -> JOIN_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',155),
  ('ADDITIONAL_CLAUSES -> WHERE_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',156),
  ('ADDITIONAL_CLAUSES -> GROUP_BY_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',157),
  ('ADDITIONAL_CLAUSES -> HAVING_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',158),
  ('ADDITIONAL_CLAUSES -> ORDER_BY_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',159),
  ('ADDITIONAL_CLAUSES -> LIMIT_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',160),
  ('ADDITIONAL_CLAUSES -> OFFSET_C ADDITIONAL_CLAUSES','ADDITIONAL_CLAUSES',2,'p_ADDITIONAL_CLAUSES','SQLLexer.py',161),
  ('ADDITIONAL_CLAUSES -> JOIN_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',162),
  ('ADDITIONAL_CLAUSES -> WHERE_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',163),
  ('ADDITIONAL_CLAUSES -> GROUP_BY_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',164),
  ('ADDITIONAL_CLAUSES -> HAVING_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',165),
  ('ADDITIONAL_CLAUSES -> ORDER_BY_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',166),
  ('ADDITIONAL_CLAUSES -> LIMIT_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',167),
  ('ADDITIONAL_CLAUSES -> OFFSET_C','ADDITIONAL_CLAUSES',1,'p_ADDITIONAL_CLAUSES','SQLLexer.py',168),
  ('JOIN_C -> INNER JOIN_C','JOIN_C',2,'p_JOIN_C','SQLLexer.py',174),
  ('JOIN_C -> LEFT JOIN_C','JOIN_C',2,'p_JOIN_C','SQLLexer.py',175),
  ('JOIN_C -> RIGHT JOIN_C','JOIN_C',2,'p_JOIN_C','SQLLexer.py',176),
  ('JOIN_C -> FULL JOIN_C','JOIN_C',2,'p_JOIN_C','SQLLexer.py',177),
  ('JOIN_C -> OUTER JOIN_C','JOIN_C',2,'p_JOIN_C','SQLLexer.py',178),
  ('JOIN_C -> JOIN ARGS JOIN_C','JOIN_C',3,'p_JOIN_C','SQLLexer.py',179),
  ('JOIN_C -> ON VARIABLE','JOIN_C',2,'p_JOIN_C','SQLLexer.py',180),
  ('JOIN_C -> ON VARIABLE EQUAL VARIABLE','JOIN_C',4,'p_JOIN_C','SQLLexer.py',181),
  ('WHERE_C -> WHERE CONDITION','WHERE_C',2,'p_WHERE_C','SQLLexer.py',187),
  ('HAVING_C -> HAVING CONDITION','HAVING_C',2,'p_HAVING_C','SQLLexer.py',193),
  ('CONDITION -> VARIABLE OPERATOR MATCH','CONDITION',3,'p_CONDITION','SQLLexer.py',199),
  ('MATCH -> QUOTE ANY QUOTE','MATCH',3,'p_MATCH','SQLLexer.py',205),
  ('MATCH -> VARIABLE','MATCH',1,'p_MATCH','SQLLexer.py',206),
  ('MATCH -> EMPTY_STRING','MATCH',1,'p_MATCH','SQLLexer.py',207),
  ('GROUP_BY_C -> GROUP BY VARIABLE','GROUP_BY_C',3,'p_GROUP_BY_C','SQLLexer.py',213),
  ('INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS','INNER_SELECT_C',5,'p_INNER_SELECT_C','SQLLexer.py',219),
  ('ORDER_BY_C -> ORDER BY VARIABLE','ORDER_BY_C',3,'p_ORDER_BY_C','SQLLexer.py',225),
  ('ORDER_BY_C -> ORDER BY VARIABLE DESC','ORDER_BY_C',4,'p_ORDER_BY_C','SQLLexer.py',226),
  ('ORDER_BY_C -> ORDER BY VARIABLE ASC','ORDER_BY_C',4,'p_ORDER_BY_C','SQLLexer.py',227),
  ('ORDER_BY_C -> ORDER BY NEWID_C','ORDER_BY_C',3,'p_ORDER_BY_C','SQLLexer.py',228),
  ('LIMIT_C -> LIMIT NUMBER','LIMIT_C',2,'p_LIMIT_C','SQLLexer.py',234),
  ('OFFSET_C -> OFFSET NUMBER','OFFSET_C',2,'p_OFFSET_C','SQLLexer.py',240),
  ('ARGS -> ARGS COMMA VARIABLE','ARGS',3,'p_ARG_LIST','SQLLexer.py',246),
  ('ARGS -> ARGS VARIABLE','ARGS',2,'p_ARG_LIST','SQLLexer.py',247),
  ('ARGS -> DISTINCT VARIABLE','ARGS',2,'p_ARG_LIST','SQLLexer.py',248),
  ('ARGS -> INNER_SELECT_C','ARGS',1,'p_ARG_LIST','SQLLexer.py',249),
  ('ARGS -> VARIABLE','ARGS',1,'p_ARG_LIST','SQLLexer.py',250),
  ('ARGS -> P_COUNT','ARGS',1,'p_ARG_LIST','SQLLexer.py',251),
  ('P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS','P_COUNT',4,'p_COUNT','SQLLexer.py',257),
  ('P_COUNT -> COUNT VARIABLE','P_COUNT',2,'p_COUNT','SQLLexer.py',258),
  ('OPERATOR -> LESS','OPERATOR',1,'p_OPERATOR','SQLLexer.py',263),
  ('OPERATOR -> MORE','OPERATOR',1,'p_OPERATOR','SQLLexer.py',264),
  ('OPERATOR -> EQUAL','OPERATOR',1,'p_OPERATOR','SQLLexer.py',265),
  ('OPERATOR -> NOT_EQUAL','OPERATOR',1,'p_OPERATOR','SQLLexer.py',266),
  ('OPERATOR -> MORE_EQ','OPERATOR',1,'p_OPERATOR','SQLLexer.py',267),
  ('OPERATOR -> LESS_EQ','OPERATOR',1,'p_OPERATOR','SQLLexer.py',268),
  ('OPERATOR -> BETWEEN','OPERATOR',1,'p_OPERATOR','SQLLexer.py',269),
  ('OPERATOR -> LIKE','OPERATOR',1,'p_OPERATOR','SQLLexer.py',270),
  ('OPERATOR -> IN','OPERATOR',1,'p_OPERATOR','SQLLexer.py',271),
  ('OPERATOR -> REGEX','OPERATOR',1,'p_OPERATOR','SQLLexer.py',272),
  ('NEWID_C -> NEWID L_PARENTIS R_PARENTIS','NEWID_C',3,'p_NEWID_C','SQLLexer.py',278),
  ('TOP_C -> TOP NUMBER ARGS','TOP_C',3,'p_TOP_C','SQLLexer.py',284),
]
