Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DASH
    DOLLAR
    DOUBLE_DOTS
    FENCE
    GERUND
    HASH
    HAT
    LINUX_HOME
    L_BRACE
    L_SQUARE_PARENTIS
    MINUS
    NOT
    NULL
    PLUS
    QUESTION_MARK
    R_BRACE
    R_SQUARE_PARENTIS
    SCREAM
    SINGLE_CHAR
    SLASH
    UNDERSCORE

Grammar

Rule 0     S' -> program
Rule 1     program -> select_tree END
Rule 2     program -> program select_tree END
Rule 3     select_tree -> SELECT ARGS FROM_PARSE
Rule 4     select_tree -> SELECT TOP_C FROM_PARSE
Rule 5     select_tree -> SELECT ALL FROM_PARSE
Rule 6     FROM_PARSE -> FROM ARGS
Rule 7     FROM_PARSE -> FROM ARGS ADDITIONAL_CLAUSES
Rule 8     ADDITIONAL_CLAUSES -> JOIN_C ADDITIONAL_CLAUSES
Rule 9     ADDITIONAL_CLAUSES -> WHERE_C ADDITIONAL_CLAUSES
Rule 10    ADDITIONAL_CLAUSES -> GROUP_BY_C ADDITIONAL_CLAUSES
Rule 11    ADDITIONAL_CLAUSES -> HAVING_C ADDITIONAL_CLAUSES
Rule 12    ADDITIONAL_CLAUSES -> ORDER_BY_C ADDITIONAL_CLAUSES
Rule 13    ADDITIONAL_CLAUSES -> LIMIT_C ADDITIONAL_CLAUSES
Rule 14    ADDITIONAL_CLAUSES -> OFFSET_C ADDITIONAL_CLAUSES
Rule 15    ADDITIONAL_CLAUSES -> JOIN_C
Rule 16    ADDITIONAL_CLAUSES -> WHERE_C
Rule 17    ADDITIONAL_CLAUSES -> GROUP_BY_C
Rule 18    ADDITIONAL_CLAUSES -> HAVING_C
Rule 19    ADDITIONAL_CLAUSES -> ORDER_BY_C
Rule 20    ADDITIONAL_CLAUSES -> LIMIT_C
Rule 21    ADDITIONAL_CLAUSES -> OFFSET_C
Rule 22    JOIN_C -> INNER JOIN_C
Rule 23    JOIN_C -> LEFT JOIN_C
Rule 24    JOIN_C -> RIGHT JOIN_C
Rule 25    JOIN_C -> FULL JOIN_C
Rule 26    JOIN_C -> OUTER JOIN_C
Rule 27    JOIN_C -> JOIN ARGS JOIN_C
Rule 28    JOIN_C -> ON VARIABLE
Rule 29    JOIN_C -> ON VARIABLE EQUAL VARIABLE
Rule 30    WHERE_C -> WHERE CONDITION
Rule 31    HAVING_C -> HAVING CONDITION
Rule 32    CONDITION -> VARIABLE OPERATOR MATCH
Rule 33    MATCH -> QUOTE ANY QUOTE
Rule 34    MATCH -> VARIABLE
Rule 35    MATCH -> EMPTY_STRING
Rule 36    GROUP_BY_C -> GROUP BY VARIABLE
Rule 37    INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS
Rule 38    ORDER_BY_C -> ORDER BY VARIABLE
Rule 39    ORDER_BY_C -> ORDER BY VARIABLE DESC
Rule 40    ORDER_BY_C -> ORDER BY VARIABLE ASC
Rule 41    ORDER_BY_C -> ORDER BY NEWID_C
Rule 42    LIMIT_C -> LIMIT NUMBER
Rule 43    OFFSET_C -> OFFSET NUMBER
Rule 44    ARGS -> ARGS COMMA VARIABLE
Rule 45    ARGS -> ARGS VARIABLE
Rule 46    ARGS -> DISTINCT VARIABLE
Rule 47    ARGS -> INNER_SELECT_C
Rule 48    ARGS -> VARIABLE
Rule 49    ARGS -> P_COUNT
Rule 50    P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS
Rule 51    P_COUNT -> COUNT VARIABLE
Rule 52    OPERATOR -> LESS
Rule 53    OPERATOR -> MORE
Rule 54    OPERATOR -> EQUAL
Rule 55    OPERATOR -> NOT_EQUAL
Rule 56    OPERATOR -> MORE_EQ
Rule 57    OPERATOR -> LESS_EQ
Rule 58    OPERATOR -> BETWEEN
Rule 59    OPERATOR -> LIKE
Rule 60    OPERATOR -> IN
Rule 61    OPERATOR -> REGEX
Rule 62    NEWID_C -> NEWID L_PARENTIS R_PARENTIS
Rule 63    TOP_C -> TOP NUMBER ARGS

Terminals, with rules where they appear

ALL                  : 5 50
ANY                  : 33
ASC                  : 40
BETWEEN              : 58
BY                   : 36 38 39 40 41
COMMA                : 44
COUNT                : 50 51
DASH                 : 
DESC                 : 39
DISTINCT             : 46
DOLLAR               : 
DOUBLE_DOTS          : 
EMPTY_STRING         : 35
END                  : 1 2
EQUAL                : 29 54
FENCE                : 
FROM                 : 6 7
FULL                 : 25
GERUND               : 
GROUP                : 36
HASH                 : 
HAT                  : 
HAVING               : 31
IN                   : 60
INNER                : 22
JOIN                 : 27
LEFT                 : 23
LESS                 : 52
LESS_EQ              : 57
LIKE                 : 59
LIMIT                : 42
LINUX_HOME           : 
L_BRACE              : 
L_PARENTIS           : 37 50 62
L_SQUARE_PARENTIS    : 
MINUS                : 
MORE                 : 53
MORE_EQ              : 56
NEWID                : 62
NOT                  : 
NOT_EQUAL            : 55
NULL                 : 
NUMBER               : 42 43 63
OFFSET               : 43
ON                   : 28 29
ORDER                : 38 39 40 41
OUTER                : 26
PLUS                 : 
QUESTION_MARK        : 
QUOTE                : 33 33
REGEX                : 61
RIGHT                : 24
R_BRACE              : 
R_PARENTIS           : 37 50 62
R_SQUARE_PARENTIS    : 
SCREAM               : 
SELECT               : 3 4 5 37
SINGLE_CHAR          : 
SLASH                : 
TOP                  : 63
UNDERSCORE           : 
VARIABLE             : 28 29 29 32 34 36 38 39 40 44 45 46 48 51
WHERE                : 30
error                : 

Nonterminals, with rules where they appear

ADDITIONAL_CLAUSES   : 7 8 9 10 11 12 13 14
ARGS                 : 3 6 7 27 37 44 45 63
CONDITION            : 30 31
FROM_PARSE           : 3 4 5 37
GROUP_BY_C           : 10 17
HAVING_C             : 11 18
INNER_SELECT_C       : 47
JOIN_C               : 8 15 22 23 24 25 26 27
LIMIT_C              : 13 20
MATCH                : 32
NEWID_C              : 41
OFFSET_C             : 14 21
OPERATOR             : 32
ORDER_BY_C           : 12 19
P_COUNT              : 49
TOP_C                : 4
WHERE_C              : 9 16
program              : 2 0
select_tree          : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . select_tree END
    (2) program -> . program select_tree END
    (3) select_tree -> . SELECT ARGS FROM_PARSE
    (4) select_tree -> . SELECT TOP_C FROM_PARSE
    (5) select_tree -> . SELECT ALL FROM_PARSE

    SELECT          shift and go to state 3

    program                        shift and go to state 1
    select_tree                    shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . select_tree END
    (3) select_tree -> . SELECT ARGS FROM_PARSE
    (4) select_tree -> . SELECT TOP_C FROM_PARSE
    (5) select_tree -> . SELECT ALL FROM_PARSE

    SELECT          shift and go to state 3

    select_tree                    shift and go to state 4

state 2

    (1) program -> select_tree . END

    END             shift and go to state 5


state 3

    (3) select_tree -> SELECT . ARGS FROM_PARSE
    (4) select_tree -> SELECT . TOP_C FROM_PARSE
    (5) select_tree -> SELECT . ALL FROM_PARSE
    (44) ARGS -> . ARGS COMMA VARIABLE
    (45) ARGS -> . ARGS VARIABLE
    (46) ARGS -> . DISTINCT VARIABLE
    (47) ARGS -> . INNER_SELECT_C
    (48) ARGS -> . VARIABLE
    (49) ARGS -> . P_COUNT
    (63) TOP_C -> . TOP NUMBER ARGS
    (37) INNER_SELECT_C -> . L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS
    (50) P_COUNT -> . COUNT L_PARENTIS ALL R_PARENTIS
    (51) P_COUNT -> . COUNT VARIABLE

    ALL             shift and go to state 8
    DISTINCT        shift and go to state 10
    VARIABLE        shift and go to state 9
    TOP             shift and go to state 13
    L_PARENTIS      shift and go to state 14
    COUNT           shift and go to state 15

    ARGS                           shift and go to state 6
    TOP_C                          shift and go to state 7
    INNER_SELECT_C                 shift and go to state 11
    P_COUNT                        shift and go to state 12

state 4

    (2) program -> program select_tree . END

    END             shift and go to state 16


state 5

    (1) program -> select_tree END .

    SELECT          reduce using rule 1 (program -> select_tree END .)
    $end            reduce using rule 1 (program -> select_tree END .)


state 6

    (3) select_tree -> SELECT ARGS . FROM_PARSE
    (44) ARGS -> ARGS . COMMA VARIABLE
    (45) ARGS -> ARGS . VARIABLE
    (6) FROM_PARSE -> . FROM ARGS
    (7) FROM_PARSE -> . FROM ARGS ADDITIONAL_CLAUSES

    COMMA           shift and go to state 18
    VARIABLE        shift and go to state 19
    FROM            shift and go to state 20

    FROM_PARSE                     shift and go to state 17

state 7

    (4) select_tree -> SELECT TOP_C . FROM_PARSE
    (6) FROM_PARSE -> . FROM ARGS
    (7) FROM_PARSE -> . FROM ARGS ADDITIONAL_CLAUSES

    FROM            shift and go to state 20

    FROM_PARSE                     shift and go to state 21

state 8

    (5) select_tree -> SELECT ALL . FROM_PARSE
    (6) FROM_PARSE -> . FROM ARGS
    (7) FROM_PARSE -> . FROM ARGS ADDITIONAL_CLAUSES

    FROM            shift and go to state 20

    FROM_PARSE                     shift and go to state 22

state 9

    (48) ARGS -> VARIABLE .

    COMMA           reduce using rule 48 (ARGS -> VARIABLE .)
    VARIABLE        reduce using rule 48 (ARGS -> VARIABLE .)
    FROM            reduce using rule 48 (ARGS -> VARIABLE .)
    INNER           reduce using rule 48 (ARGS -> VARIABLE .)
    LEFT            reduce using rule 48 (ARGS -> VARIABLE .)
    RIGHT           reduce using rule 48 (ARGS -> VARIABLE .)
    FULL            reduce using rule 48 (ARGS -> VARIABLE .)
    OUTER           reduce using rule 48 (ARGS -> VARIABLE .)
    JOIN            reduce using rule 48 (ARGS -> VARIABLE .)
    ON              reduce using rule 48 (ARGS -> VARIABLE .)
    WHERE           reduce using rule 48 (ARGS -> VARIABLE .)
    GROUP           reduce using rule 48 (ARGS -> VARIABLE .)
    HAVING          reduce using rule 48 (ARGS -> VARIABLE .)
    ORDER           reduce using rule 48 (ARGS -> VARIABLE .)
    LIMIT           reduce using rule 48 (ARGS -> VARIABLE .)
    OFFSET          reduce using rule 48 (ARGS -> VARIABLE .)
    END             reduce using rule 48 (ARGS -> VARIABLE .)
    R_PARENTIS      reduce using rule 48 (ARGS -> VARIABLE .)


state 10

    (46) ARGS -> DISTINCT . VARIABLE

    VARIABLE        shift and go to state 23


state 11

    (47) ARGS -> INNER_SELECT_C .

    COMMA           reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    VARIABLE        reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    FROM            reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    INNER           reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    LEFT            reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    RIGHT           reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    FULL            reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    OUTER           reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    JOIN            reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    ON              reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    WHERE           reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    GROUP           reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    HAVING          reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    ORDER           reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    LIMIT           reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    OFFSET          reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    END             reduce using rule 47 (ARGS -> INNER_SELECT_C .)
    R_PARENTIS      reduce using rule 47 (ARGS -> INNER_SELECT_C .)


state 12

    (49) ARGS -> P_COUNT .

    COMMA           reduce using rule 49 (ARGS -> P_COUNT .)
    VARIABLE        reduce using rule 49 (ARGS -> P_COUNT .)
    FROM            reduce using rule 49 (ARGS -> P_COUNT .)
    INNER           reduce using rule 49 (ARGS -> P_COUNT .)
    LEFT            reduce using rule 49 (ARGS -> P_COUNT .)
    RIGHT           reduce using rule 49 (ARGS -> P_COUNT .)
    FULL            reduce using rule 49 (ARGS -> P_COUNT .)
    OUTER           reduce using rule 49 (ARGS -> P_COUNT .)
    JOIN            reduce using rule 49 (ARGS -> P_COUNT .)
    ON              reduce using rule 49 (ARGS -> P_COUNT .)
    WHERE           reduce using rule 49 (ARGS -> P_COUNT .)
    GROUP           reduce using rule 49 (ARGS -> P_COUNT .)
    HAVING          reduce using rule 49 (ARGS -> P_COUNT .)
    ORDER           reduce using rule 49 (ARGS -> P_COUNT .)
    LIMIT           reduce using rule 49 (ARGS -> P_COUNT .)
    OFFSET          reduce using rule 49 (ARGS -> P_COUNT .)
    END             reduce using rule 49 (ARGS -> P_COUNT .)
    R_PARENTIS      reduce using rule 49 (ARGS -> P_COUNT .)


state 13

    (63) TOP_C -> TOP . NUMBER ARGS

    NUMBER          shift and go to state 24


state 14

    (37) INNER_SELECT_C -> L_PARENTIS . SELECT ARGS FROM_PARSE R_PARENTIS

    SELECT          shift and go to state 25


state 15

    (50) P_COUNT -> COUNT . L_PARENTIS ALL R_PARENTIS
    (51) P_COUNT -> COUNT . VARIABLE

    L_PARENTIS      shift and go to state 26
    VARIABLE        shift and go to state 27


state 16

    (2) program -> program select_tree END .

    SELECT          reduce using rule 2 (program -> program select_tree END .)
    $end            reduce using rule 2 (program -> program select_tree END .)


state 17

    (3) select_tree -> SELECT ARGS FROM_PARSE .

    END             reduce using rule 3 (select_tree -> SELECT ARGS FROM_PARSE .)


state 18

    (44) ARGS -> ARGS COMMA . VARIABLE

    VARIABLE        shift and go to state 28


state 19

    (45) ARGS -> ARGS VARIABLE .

    COMMA           reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    VARIABLE        reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    FROM            reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    INNER           reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    LEFT            reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    RIGHT           reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    FULL            reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    OUTER           reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    JOIN            reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    ON              reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    WHERE           reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    GROUP           reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    HAVING          reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    ORDER           reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    LIMIT           reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    OFFSET          reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    END             reduce using rule 45 (ARGS -> ARGS VARIABLE .)
    R_PARENTIS      reduce using rule 45 (ARGS -> ARGS VARIABLE .)


state 20

    (6) FROM_PARSE -> FROM . ARGS
    (7) FROM_PARSE -> FROM . ARGS ADDITIONAL_CLAUSES
    (44) ARGS -> . ARGS COMMA VARIABLE
    (45) ARGS -> . ARGS VARIABLE
    (46) ARGS -> . DISTINCT VARIABLE
    (47) ARGS -> . INNER_SELECT_C
    (48) ARGS -> . VARIABLE
    (49) ARGS -> . P_COUNT
    (37) INNER_SELECT_C -> . L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS
    (50) P_COUNT -> . COUNT L_PARENTIS ALL R_PARENTIS
    (51) P_COUNT -> . COUNT VARIABLE

    DISTINCT        shift and go to state 10
    VARIABLE        shift and go to state 9
    L_PARENTIS      shift and go to state 14
    COUNT           shift and go to state 15

    ARGS                           shift and go to state 29
    INNER_SELECT_C                 shift and go to state 11
    P_COUNT                        shift and go to state 12

state 21

    (4) select_tree -> SELECT TOP_C FROM_PARSE .

    END             reduce using rule 4 (select_tree -> SELECT TOP_C FROM_PARSE .)


state 22

    (5) select_tree -> SELECT ALL FROM_PARSE .

    END             reduce using rule 5 (select_tree -> SELECT ALL FROM_PARSE .)


state 23

    (46) ARGS -> DISTINCT VARIABLE .

    COMMA           reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    VARIABLE        reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    FROM            reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    INNER           reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    LEFT            reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    RIGHT           reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    FULL            reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    OUTER           reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    JOIN            reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    ON              reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    WHERE           reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    GROUP           reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    HAVING          reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    ORDER           reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    LIMIT           reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    OFFSET          reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    END             reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)
    R_PARENTIS      reduce using rule 46 (ARGS -> DISTINCT VARIABLE .)


state 24

    (63) TOP_C -> TOP NUMBER . ARGS
    (44) ARGS -> . ARGS COMMA VARIABLE
    (45) ARGS -> . ARGS VARIABLE
    (46) ARGS -> . DISTINCT VARIABLE
    (47) ARGS -> . INNER_SELECT_C
    (48) ARGS -> . VARIABLE
    (49) ARGS -> . P_COUNT
    (37) INNER_SELECT_C -> . L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS
    (50) P_COUNT -> . COUNT L_PARENTIS ALL R_PARENTIS
    (51) P_COUNT -> . COUNT VARIABLE

    DISTINCT        shift and go to state 10
    VARIABLE        shift and go to state 9
    L_PARENTIS      shift and go to state 14
    COUNT           shift and go to state 15

    ARGS                           shift and go to state 30
    INNER_SELECT_C                 shift and go to state 11
    P_COUNT                        shift and go to state 12

state 25

    (37) INNER_SELECT_C -> L_PARENTIS SELECT . ARGS FROM_PARSE R_PARENTIS
    (44) ARGS -> . ARGS COMMA VARIABLE
    (45) ARGS -> . ARGS VARIABLE
    (46) ARGS -> . DISTINCT VARIABLE
    (47) ARGS -> . INNER_SELECT_C
    (48) ARGS -> . VARIABLE
    (49) ARGS -> . P_COUNT
    (37) INNER_SELECT_C -> . L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS
    (50) P_COUNT -> . COUNT L_PARENTIS ALL R_PARENTIS
    (51) P_COUNT -> . COUNT VARIABLE

    DISTINCT        shift and go to state 10
    VARIABLE        shift and go to state 9
    L_PARENTIS      shift and go to state 14
    COUNT           shift and go to state 15

    ARGS                           shift and go to state 31
    INNER_SELECT_C                 shift and go to state 11
    P_COUNT                        shift and go to state 12

state 26

    (50) P_COUNT -> COUNT L_PARENTIS . ALL R_PARENTIS

    ALL             shift and go to state 32


state 27

    (51) P_COUNT -> COUNT VARIABLE .

    COMMA           reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    VARIABLE        reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    FROM            reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    INNER           reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    LEFT            reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    RIGHT           reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    FULL            reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    OUTER           reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    JOIN            reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    ON              reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    WHERE           reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    GROUP           reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    HAVING          reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    ORDER           reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    LIMIT           reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    OFFSET          reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    END             reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)
    R_PARENTIS      reduce using rule 51 (P_COUNT -> COUNT VARIABLE .)


state 28

    (44) ARGS -> ARGS COMMA VARIABLE .

    COMMA           reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    VARIABLE        reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    FROM            reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    INNER           reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    LEFT            reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    RIGHT           reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    FULL            reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    OUTER           reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    JOIN            reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    ON              reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    WHERE           reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    GROUP           reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    HAVING          reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    ORDER           reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    LIMIT           reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    OFFSET          reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    END             reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)
    R_PARENTIS      reduce using rule 44 (ARGS -> ARGS COMMA VARIABLE .)


state 29

    (6) FROM_PARSE -> FROM ARGS .
    (7) FROM_PARSE -> FROM ARGS . ADDITIONAL_CLAUSES
    (44) ARGS -> ARGS . COMMA VARIABLE
    (45) ARGS -> ARGS . VARIABLE
    (8) ADDITIONAL_CLAUSES -> . JOIN_C ADDITIONAL_CLAUSES
    (9) ADDITIONAL_CLAUSES -> . WHERE_C ADDITIONAL_CLAUSES
    (10) ADDITIONAL_CLAUSES -> . GROUP_BY_C ADDITIONAL_CLAUSES
    (11) ADDITIONAL_CLAUSES -> . HAVING_C ADDITIONAL_CLAUSES
    (12) ADDITIONAL_CLAUSES -> . ORDER_BY_C ADDITIONAL_CLAUSES
    (13) ADDITIONAL_CLAUSES -> . LIMIT_C ADDITIONAL_CLAUSES
    (14) ADDITIONAL_CLAUSES -> . OFFSET_C ADDITIONAL_CLAUSES
    (15) ADDITIONAL_CLAUSES -> . JOIN_C
    (16) ADDITIONAL_CLAUSES -> . WHERE_C
    (17) ADDITIONAL_CLAUSES -> . GROUP_BY_C
    (18) ADDITIONAL_CLAUSES -> . HAVING_C
    (19) ADDITIONAL_CLAUSES -> . ORDER_BY_C
    (20) ADDITIONAL_CLAUSES -> . LIMIT_C
    (21) ADDITIONAL_CLAUSES -> . OFFSET_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE
    (30) WHERE_C -> . WHERE CONDITION
    (36) GROUP_BY_C -> . GROUP BY VARIABLE
    (31) HAVING_C -> . HAVING CONDITION
    (38) ORDER_BY_C -> . ORDER BY VARIABLE
    (39) ORDER_BY_C -> . ORDER BY VARIABLE DESC
    (40) ORDER_BY_C -> . ORDER BY VARIABLE ASC
    (41) ORDER_BY_C -> . ORDER BY NEWID_C
    (42) LIMIT_C -> . LIMIT NUMBER
    (43) OFFSET_C -> . OFFSET NUMBER

    END             reduce using rule 6 (FROM_PARSE -> FROM ARGS .)
    R_PARENTIS      reduce using rule 6 (FROM_PARSE -> FROM ARGS .)
    COMMA           shift and go to state 18
    VARIABLE        shift and go to state 19
    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47
    WHERE           shift and go to state 48
    GROUP           shift and go to state 49
    HAVING          shift and go to state 50
    ORDER           shift and go to state 51
    LIMIT           shift and go to state 52
    OFFSET          shift and go to state 53

    ADDITIONAL_CLAUSES             shift and go to state 33
    JOIN_C                         shift and go to state 34
    WHERE_C                        shift and go to state 35
    GROUP_BY_C                     shift and go to state 36
    HAVING_C                       shift and go to state 37
    ORDER_BY_C                     shift and go to state 38
    LIMIT_C                        shift and go to state 39
    OFFSET_C                       shift and go to state 40

state 30

    (63) TOP_C -> TOP NUMBER ARGS .
    (44) ARGS -> ARGS . COMMA VARIABLE
    (45) ARGS -> ARGS . VARIABLE

    FROM            reduce using rule 63 (TOP_C -> TOP NUMBER ARGS .)
    COMMA           shift and go to state 18
    VARIABLE        shift and go to state 19


state 31

    (37) INNER_SELECT_C -> L_PARENTIS SELECT ARGS . FROM_PARSE R_PARENTIS
    (44) ARGS -> ARGS . COMMA VARIABLE
    (45) ARGS -> ARGS . VARIABLE
    (6) FROM_PARSE -> . FROM ARGS
    (7) FROM_PARSE -> . FROM ARGS ADDITIONAL_CLAUSES

    COMMA           shift and go to state 18
    VARIABLE        shift and go to state 19
    FROM            shift and go to state 20

    FROM_PARSE                     shift and go to state 54

state 32

    (50) P_COUNT -> COUNT L_PARENTIS ALL . R_PARENTIS

    R_PARENTIS      shift and go to state 55


state 33

    (7) FROM_PARSE -> FROM ARGS ADDITIONAL_CLAUSES .

    END             reduce using rule 7 (FROM_PARSE -> FROM ARGS ADDITIONAL_CLAUSES .)
    R_PARENTIS      reduce using rule 7 (FROM_PARSE -> FROM ARGS ADDITIONAL_CLAUSES .)


state 34

    (8) ADDITIONAL_CLAUSES -> JOIN_C . ADDITIONAL_CLAUSES
    (15) ADDITIONAL_CLAUSES -> JOIN_C .
    (8) ADDITIONAL_CLAUSES -> . JOIN_C ADDITIONAL_CLAUSES
    (9) ADDITIONAL_CLAUSES -> . WHERE_C ADDITIONAL_CLAUSES
    (10) ADDITIONAL_CLAUSES -> . GROUP_BY_C ADDITIONAL_CLAUSES
    (11) ADDITIONAL_CLAUSES -> . HAVING_C ADDITIONAL_CLAUSES
    (12) ADDITIONAL_CLAUSES -> . ORDER_BY_C ADDITIONAL_CLAUSES
    (13) ADDITIONAL_CLAUSES -> . LIMIT_C ADDITIONAL_CLAUSES
    (14) ADDITIONAL_CLAUSES -> . OFFSET_C ADDITIONAL_CLAUSES
    (15) ADDITIONAL_CLAUSES -> . JOIN_C
    (16) ADDITIONAL_CLAUSES -> . WHERE_C
    (17) ADDITIONAL_CLAUSES -> . GROUP_BY_C
    (18) ADDITIONAL_CLAUSES -> . HAVING_C
    (19) ADDITIONAL_CLAUSES -> . ORDER_BY_C
    (20) ADDITIONAL_CLAUSES -> . LIMIT_C
    (21) ADDITIONAL_CLAUSES -> . OFFSET_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE
    (30) WHERE_C -> . WHERE CONDITION
    (36) GROUP_BY_C -> . GROUP BY VARIABLE
    (31) HAVING_C -> . HAVING CONDITION
    (38) ORDER_BY_C -> . ORDER BY VARIABLE
    (39) ORDER_BY_C -> . ORDER BY VARIABLE DESC
    (40) ORDER_BY_C -> . ORDER BY VARIABLE ASC
    (41) ORDER_BY_C -> . ORDER BY NEWID_C
    (42) LIMIT_C -> . LIMIT NUMBER
    (43) OFFSET_C -> . OFFSET NUMBER

    END             reduce using rule 15 (ADDITIONAL_CLAUSES -> JOIN_C .)
    R_PARENTIS      reduce using rule 15 (ADDITIONAL_CLAUSES -> JOIN_C .)
    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47
    WHERE           shift and go to state 48
    GROUP           shift and go to state 49
    HAVING          shift and go to state 50
    ORDER           shift and go to state 51
    LIMIT           shift and go to state 52
    OFFSET          shift and go to state 53

    JOIN_C                         shift and go to state 34
    ADDITIONAL_CLAUSES             shift and go to state 56
    WHERE_C                        shift and go to state 35
    GROUP_BY_C                     shift and go to state 36
    HAVING_C                       shift and go to state 37
    ORDER_BY_C                     shift and go to state 38
    LIMIT_C                        shift and go to state 39
    OFFSET_C                       shift and go to state 40

state 35

    (9) ADDITIONAL_CLAUSES -> WHERE_C . ADDITIONAL_CLAUSES
    (16) ADDITIONAL_CLAUSES -> WHERE_C .
    (8) ADDITIONAL_CLAUSES -> . JOIN_C ADDITIONAL_CLAUSES
    (9) ADDITIONAL_CLAUSES -> . WHERE_C ADDITIONAL_CLAUSES
    (10) ADDITIONAL_CLAUSES -> . GROUP_BY_C ADDITIONAL_CLAUSES
    (11) ADDITIONAL_CLAUSES -> . HAVING_C ADDITIONAL_CLAUSES
    (12) ADDITIONAL_CLAUSES -> . ORDER_BY_C ADDITIONAL_CLAUSES
    (13) ADDITIONAL_CLAUSES -> . LIMIT_C ADDITIONAL_CLAUSES
    (14) ADDITIONAL_CLAUSES -> . OFFSET_C ADDITIONAL_CLAUSES
    (15) ADDITIONAL_CLAUSES -> . JOIN_C
    (16) ADDITIONAL_CLAUSES -> . WHERE_C
    (17) ADDITIONAL_CLAUSES -> . GROUP_BY_C
    (18) ADDITIONAL_CLAUSES -> . HAVING_C
    (19) ADDITIONAL_CLAUSES -> . ORDER_BY_C
    (20) ADDITIONAL_CLAUSES -> . LIMIT_C
    (21) ADDITIONAL_CLAUSES -> . OFFSET_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE
    (30) WHERE_C -> . WHERE CONDITION
    (36) GROUP_BY_C -> . GROUP BY VARIABLE
    (31) HAVING_C -> . HAVING CONDITION
    (38) ORDER_BY_C -> . ORDER BY VARIABLE
    (39) ORDER_BY_C -> . ORDER BY VARIABLE DESC
    (40) ORDER_BY_C -> . ORDER BY VARIABLE ASC
    (41) ORDER_BY_C -> . ORDER BY NEWID_C
    (42) LIMIT_C -> . LIMIT NUMBER
    (43) OFFSET_C -> . OFFSET NUMBER

    END             reduce using rule 16 (ADDITIONAL_CLAUSES -> WHERE_C .)
    R_PARENTIS      reduce using rule 16 (ADDITIONAL_CLAUSES -> WHERE_C .)
    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47
    WHERE           shift and go to state 48
    GROUP           shift and go to state 49
    HAVING          shift and go to state 50
    ORDER           shift and go to state 51
    LIMIT           shift and go to state 52
    OFFSET          shift and go to state 53

    WHERE_C                        shift and go to state 35
    ADDITIONAL_CLAUSES             shift and go to state 57
    JOIN_C                         shift and go to state 34
    GROUP_BY_C                     shift and go to state 36
    HAVING_C                       shift and go to state 37
    ORDER_BY_C                     shift and go to state 38
    LIMIT_C                        shift and go to state 39
    OFFSET_C                       shift and go to state 40

state 36

    (10) ADDITIONAL_CLAUSES -> GROUP_BY_C . ADDITIONAL_CLAUSES
    (17) ADDITIONAL_CLAUSES -> GROUP_BY_C .
    (8) ADDITIONAL_CLAUSES -> . JOIN_C ADDITIONAL_CLAUSES
    (9) ADDITIONAL_CLAUSES -> . WHERE_C ADDITIONAL_CLAUSES
    (10) ADDITIONAL_CLAUSES -> . GROUP_BY_C ADDITIONAL_CLAUSES
    (11) ADDITIONAL_CLAUSES -> . HAVING_C ADDITIONAL_CLAUSES
    (12) ADDITIONAL_CLAUSES -> . ORDER_BY_C ADDITIONAL_CLAUSES
    (13) ADDITIONAL_CLAUSES -> . LIMIT_C ADDITIONAL_CLAUSES
    (14) ADDITIONAL_CLAUSES -> . OFFSET_C ADDITIONAL_CLAUSES
    (15) ADDITIONAL_CLAUSES -> . JOIN_C
    (16) ADDITIONAL_CLAUSES -> . WHERE_C
    (17) ADDITIONAL_CLAUSES -> . GROUP_BY_C
    (18) ADDITIONAL_CLAUSES -> . HAVING_C
    (19) ADDITIONAL_CLAUSES -> . ORDER_BY_C
    (20) ADDITIONAL_CLAUSES -> . LIMIT_C
    (21) ADDITIONAL_CLAUSES -> . OFFSET_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE
    (30) WHERE_C -> . WHERE CONDITION
    (36) GROUP_BY_C -> . GROUP BY VARIABLE
    (31) HAVING_C -> . HAVING CONDITION
    (38) ORDER_BY_C -> . ORDER BY VARIABLE
    (39) ORDER_BY_C -> . ORDER BY VARIABLE DESC
    (40) ORDER_BY_C -> . ORDER BY VARIABLE ASC
    (41) ORDER_BY_C -> . ORDER BY NEWID_C
    (42) LIMIT_C -> . LIMIT NUMBER
    (43) OFFSET_C -> . OFFSET NUMBER

    END             reduce using rule 17 (ADDITIONAL_CLAUSES -> GROUP_BY_C .)
    R_PARENTIS      reduce using rule 17 (ADDITIONAL_CLAUSES -> GROUP_BY_C .)
    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47
    WHERE           shift and go to state 48
    GROUP           shift and go to state 49
    HAVING          shift and go to state 50
    ORDER           shift and go to state 51
    LIMIT           shift and go to state 52
    OFFSET          shift and go to state 53

    GROUP_BY_C                     shift and go to state 36
    ADDITIONAL_CLAUSES             shift and go to state 58
    JOIN_C                         shift and go to state 34
    WHERE_C                        shift and go to state 35
    HAVING_C                       shift and go to state 37
    ORDER_BY_C                     shift and go to state 38
    LIMIT_C                        shift and go to state 39
    OFFSET_C                       shift and go to state 40

state 37

    (11) ADDITIONAL_CLAUSES -> HAVING_C . ADDITIONAL_CLAUSES
    (18) ADDITIONAL_CLAUSES -> HAVING_C .
    (8) ADDITIONAL_CLAUSES -> . JOIN_C ADDITIONAL_CLAUSES
    (9) ADDITIONAL_CLAUSES -> . WHERE_C ADDITIONAL_CLAUSES
    (10) ADDITIONAL_CLAUSES -> . GROUP_BY_C ADDITIONAL_CLAUSES
    (11) ADDITIONAL_CLAUSES -> . HAVING_C ADDITIONAL_CLAUSES
    (12) ADDITIONAL_CLAUSES -> . ORDER_BY_C ADDITIONAL_CLAUSES
    (13) ADDITIONAL_CLAUSES -> . LIMIT_C ADDITIONAL_CLAUSES
    (14) ADDITIONAL_CLAUSES -> . OFFSET_C ADDITIONAL_CLAUSES
    (15) ADDITIONAL_CLAUSES -> . JOIN_C
    (16) ADDITIONAL_CLAUSES -> . WHERE_C
    (17) ADDITIONAL_CLAUSES -> . GROUP_BY_C
    (18) ADDITIONAL_CLAUSES -> . HAVING_C
    (19) ADDITIONAL_CLAUSES -> . ORDER_BY_C
    (20) ADDITIONAL_CLAUSES -> . LIMIT_C
    (21) ADDITIONAL_CLAUSES -> . OFFSET_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE
    (30) WHERE_C -> . WHERE CONDITION
    (36) GROUP_BY_C -> . GROUP BY VARIABLE
    (31) HAVING_C -> . HAVING CONDITION
    (38) ORDER_BY_C -> . ORDER BY VARIABLE
    (39) ORDER_BY_C -> . ORDER BY VARIABLE DESC
    (40) ORDER_BY_C -> . ORDER BY VARIABLE ASC
    (41) ORDER_BY_C -> . ORDER BY NEWID_C
    (42) LIMIT_C -> . LIMIT NUMBER
    (43) OFFSET_C -> . OFFSET NUMBER

    END             reduce using rule 18 (ADDITIONAL_CLAUSES -> HAVING_C .)
    R_PARENTIS      reduce using rule 18 (ADDITIONAL_CLAUSES -> HAVING_C .)
    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47
    WHERE           shift and go to state 48
    GROUP           shift and go to state 49
    HAVING          shift and go to state 50
    ORDER           shift and go to state 51
    LIMIT           shift and go to state 52
    OFFSET          shift and go to state 53

    HAVING_C                       shift and go to state 37
    ADDITIONAL_CLAUSES             shift and go to state 59
    JOIN_C                         shift and go to state 34
    WHERE_C                        shift and go to state 35
    GROUP_BY_C                     shift and go to state 36
    ORDER_BY_C                     shift and go to state 38
    LIMIT_C                        shift and go to state 39
    OFFSET_C                       shift and go to state 40

state 38

    (12) ADDITIONAL_CLAUSES -> ORDER_BY_C . ADDITIONAL_CLAUSES
    (19) ADDITIONAL_CLAUSES -> ORDER_BY_C .
    (8) ADDITIONAL_CLAUSES -> . JOIN_C ADDITIONAL_CLAUSES
    (9) ADDITIONAL_CLAUSES -> . WHERE_C ADDITIONAL_CLAUSES
    (10) ADDITIONAL_CLAUSES -> . GROUP_BY_C ADDITIONAL_CLAUSES
    (11) ADDITIONAL_CLAUSES -> . HAVING_C ADDITIONAL_CLAUSES
    (12) ADDITIONAL_CLAUSES -> . ORDER_BY_C ADDITIONAL_CLAUSES
    (13) ADDITIONAL_CLAUSES -> . LIMIT_C ADDITIONAL_CLAUSES
    (14) ADDITIONAL_CLAUSES -> . OFFSET_C ADDITIONAL_CLAUSES
    (15) ADDITIONAL_CLAUSES -> . JOIN_C
    (16) ADDITIONAL_CLAUSES -> . WHERE_C
    (17) ADDITIONAL_CLAUSES -> . GROUP_BY_C
    (18) ADDITIONAL_CLAUSES -> . HAVING_C
    (19) ADDITIONAL_CLAUSES -> . ORDER_BY_C
    (20) ADDITIONAL_CLAUSES -> . LIMIT_C
    (21) ADDITIONAL_CLAUSES -> . OFFSET_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE
    (30) WHERE_C -> . WHERE CONDITION
    (36) GROUP_BY_C -> . GROUP BY VARIABLE
    (31) HAVING_C -> . HAVING CONDITION
    (38) ORDER_BY_C -> . ORDER BY VARIABLE
    (39) ORDER_BY_C -> . ORDER BY VARIABLE DESC
    (40) ORDER_BY_C -> . ORDER BY VARIABLE ASC
    (41) ORDER_BY_C -> . ORDER BY NEWID_C
    (42) LIMIT_C -> . LIMIT NUMBER
    (43) OFFSET_C -> . OFFSET NUMBER

    END             reduce using rule 19 (ADDITIONAL_CLAUSES -> ORDER_BY_C .)
    R_PARENTIS      reduce using rule 19 (ADDITIONAL_CLAUSES -> ORDER_BY_C .)
    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47
    WHERE           shift and go to state 48
    GROUP           shift and go to state 49
    HAVING          shift and go to state 50
    ORDER           shift and go to state 51
    LIMIT           shift and go to state 52
    OFFSET          shift and go to state 53

    ORDER_BY_C                     shift and go to state 38
    ADDITIONAL_CLAUSES             shift and go to state 60
    JOIN_C                         shift and go to state 34
    WHERE_C                        shift and go to state 35
    GROUP_BY_C                     shift and go to state 36
    HAVING_C                       shift and go to state 37
    LIMIT_C                        shift and go to state 39
    OFFSET_C                       shift and go to state 40

state 39

    (13) ADDITIONAL_CLAUSES -> LIMIT_C . ADDITIONAL_CLAUSES
    (20) ADDITIONAL_CLAUSES -> LIMIT_C .
    (8) ADDITIONAL_CLAUSES -> . JOIN_C ADDITIONAL_CLAUSES
    (9) ADDITIONAL_CLAUSES -> . WHERE_C ADDITIONAL_CLAUSES
    (10) ADDITIONAL_CLAUSES -> . GROUP_BY_C ADDITIONAL_CLAUSES
    (11) ADDITIONAL_CLAUSES -> . HAVING_C ADDITIONAL_CLAUSES
    (12) ADDITIONAL_CLAUSES -> . ORDER_BY_C ADDITIONAL_CLAUSES
    (13) ADDITIONAL_CLAUSES -> . LIMIT_C ADDITIONAL_CLAUSES
    (14) ADDITIONAL_CLAUSES -> . OFFSET_C ADDITIONAL_CLAUSES
    (15) ADDITIONAL_CLAUSES -> . JOIN_C
    (16) ADDITIONAL_CLAUSES -> . WHERE_C
    (17) ADDITIONAL_CLAUSES -> . GROUP_BY_C
    (18) ADDITIONAL_CLAUSES -> . HAVING_C
    (19) ADDITIONAL_CLAUSES -> . ORDER_BY_C
    (20) ADDITIONAL_CLAUSES -> . LIMIT_C
    (21) ADDITIONAL_CLAUSES -> . OFFSET_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE
    (30) WHERE_C -> . WHERE CONDITION
    (36) GROUP_BY_C -> . GROUP BY VARIABLE
    (31) HAVING_C -> . HAVING CONDITION
    (38) ORDER_BY_C -> . ORDER BY VARIABLE
    (39) ORDER_BY_C -> . ORDER BY VARIABLE DESC
    (40) ORDER_BY_C -> . ORDER BY VARIABLE ASC
    (41) ORDER_BY_C -> . ORDER BY NEWID_C
    (42) LIMIT_C -> . LIMIT NUMBER
    (43) OFFSET_C -> . OFFSET NUMBER

    END             reduce using rule 20 (ADDITIONAL_CLAUSES -> LIMIT_C .)
    R_PARENTIS      reduce using rule 20 (ADDITIONAL_CLAUSES -> LIMIT_C .)
    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47
    WHERE           shift and go to state 48
    GROUP           shift and go to state 49
    HAVING          shift and go to state 50
    ORDER           shift and go to state 51
    LIMIT           shift and go to state 52
    OFFSET          shift and go to state 53

    LIMIT_C                        shift and go to state 39
    ADDITIONAL_CLAUSES             shift and go to state 61
    JOIN_C                         shift and go to state 34
    WHERE_C                        shift and go to state 35
    GROUP_BY_C                     shift and go to state 36
    HAVING_C                       shift and go to state 37
    ORDER_BY_C                     shift and go to state 38
    OFFSET_C                       shift and go to state 40

state 40

    (14) ADDITIONAL_CLAUSES -> OFFSET_C . ADDITIONAL_CLAUSES
    (21) ADDITIONAL_CLAUSES -> OFFSET_C .
    (8) ADDITIONAL_CLAUSES -> . JOIN_C ADDITIONAL_CLAUSES
    (9) ADDITIONAL_CLAUSES -> . WHERE_C ADDITIONAL_CLAUSES
    (10) ADDITIONAL_CLAUSES -> . GROUP_BY_C ADDITIONAL_CLAUSES
    (11) ADDITIONAL_CLAUSES -> . HAVING_C ADDITIONAL_CLAUSES
    (12) ADDITIONAL_CLAUSES -> . ORDER_BY_C ADDITIONAL_CLAUSES
    (13) ADDITIONAL_CLAUSES -> . LIMIT_C ADDITIONAL_CLAUSES
    (14) ADDITIONAL_CLAUSES -> . OFFSET_C ADDITIONAL_CLAUSES
    (15) ADDITIONAL_CLAUSES -> . JOIN_C
    (16) ADDITIONAL_CLAUSES -> . WHERE_C
    (17) ADDITIONAL_CLAUSES -> . GROUP_BY_C
    (18) ADDITIONAL_CLAUSES -> . HAVING_C
    (19) ADDITIONAL_CLAUSES -> . ORDER_BY_C
    (20) ADDITIONAL_CLAUSES -> . LIMIT_C
    (21) ADDITIONAL_CLAUSES -> . OFFSET_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE
    (30) WHERE_C -> . WHERE CONDITION
    (36) GROUP_BY_C -> . GROUP BY VARIABLE
    (31) HAVING_C -> . HAVING CONDITION
    (38) ORDER_BY_C -> . ORDER BY VARIABLE
    (39) ORDER_BY_C -> . ORDER BY VARIABLE DESC
    (40) ORDER_BY_C -> . ORDER BY VARIABLE ASC
    (41) ORDER_BY_C -> . ORDER BY NEWID_C
    (42) LIMIT_C -> . LIMIT NUMBER
    (43) OFFSET_C -> . OFFSET NUMBER

    END             reduce using rule 21 (ADDITIONAL_CLAUSES -> OFFSET_C .)
    R_PARENTIS      reduce using rule 21 (ADDITIONAL_CLAUSES -> OFFSET_C .)
    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47
    WHERE           shift and go to state 48
    GROUP           shift and go to state 49
    HAVING          shift and go to state 50
    ORDER           shift and go to state 51
    LIMIT           shift and go to state 52
    OFFSET          shift and go to state 53

    OFFSET_C                       shift and go to state 40
    ADDITIONAL_CLAUSES             shift and go to state 62
    JOIN_C                         shift and go to state 34
    WHERE_C                        shift and go to state 35
    GROUP_BY_C                     shift and go to state 36
    HAVING_C                       shift and go to state 37
    ORDER_BY_C                     shift and go to state 38
    LIMIT_C                        shift and go to state 39

state 41

    (22) JOIN_C -> INNER . JOIN_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE

    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47

    JOIN_C                         shift and go to state 63

state 42

    (23) JOIN_C -> LEFT . JOIN_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE

    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47

    JOIN_C                         shift and go to state 64

state 43

    (24) JOIN_C -> RIGHT . JOIN_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE

    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47

    JOIN_C                         shift and go to state 65

state 44

    (25) JOIN_C -> FULL . JOIN_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE

    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47

    JOIN_C                         shift and go to state 66

state 45

    (26) JOIN_C -> OUTER . JOIN_C
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE

    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47

    JOIN_C                         shift and go to state 67

state 46

    (27) JOIN_C -> JOIN . ARGS JOIN_C
    (44) ARGS -> . ARGS COMMA VARIABLE
    (45) ARGS -> . ARGS VARIABLE
    (46) ARGS -> . DISTINCT VARIABLE
    (47) ARGS -> . INNER_SELECT_C
    (48) ARGS -> . VARIABLE
    (49) ARGS -> . P_COUNT
    (37) INNER_SELECT_C -> . L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS
    (50) P_COUNT -> . COUNT L_PARENTIS ALL R_PARENTIS
    (51) P_COUNT -> . COUNT VARIABLE

    DISTINCT        shift and go to state 10
    VARIABLE        shift and go to state 9
    L_PARENTIS      shift and go to state 14
    COUNT           shift and go to state 15

    ARGS                           shift and go to state 68
    INNER_SELECT_C                 shift and go to state 11
    P_COUNT                        shift and go to state 12

state 47

    (28) JOIN_C -> ON . VARIABLE
    (29) JOIN_C -> ON . VARIABLE EQUAL VARIABLE

    VARIABLE        shift and go to state 69


state 48

    (30) WHERE_C -> WHERE . CONDITION
    (32) CONDITION -> . VARIABLE OPERATOR MATCH

    VARIABLE        shift and go to state 71

    CONDITION                      shift and go to state 70

state 49

    (36) GROUP_BY_C -> GROUP . BY VARIABLE

    BY              shift and go to state 72


state 50

    (31) HAVING_C -> HAVING . CONDITION
    (32) CONDITION -> . VARIABLE OPERATOR MATCH

    VARIABLE        shift and go to state 71

    CONDITION                      shift and go to state 73

state 51

    (38) ORDER_BY_C -> ORDER . BY VARIABLE
    (39) ORDER_BY_C -> ORDER . BY VARIABLE DESC
    (40) ORDER_BY_C -> ORDER . BY VARIABLE ASC
    (41) ORDER_BY_C -> ORDER . BY NEWID_C

    BY              shift and go to state 74


state 52

    (42) LIMIT_C -> LIMIT . NUMBER

    NUMBER          shift and go to state 75


state 53

    (43) OFFSET_C -> OFFSET . NUMBER

    NUMBER          shift and go to state 76


state 54

    (37) INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE . R_PARENTIS

    R_PARENTIS      shift and go to state 77


state 55

    (50) P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .

    COMMA           reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    VARIABLE        reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    FROM            reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    INNER           reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    LEFT            reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    RIGHT           reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    FULL            reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    OUTER           reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    JOIN            reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    ON              reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    WHERE           reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    GROUP           reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    HAVING          reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    ORDER           reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    LIMIT           reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    OFFSET          reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    END             reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)
    R_PARENTIS      reduce using rule 50 (P_COUNT -> COUNT L_PARENTIS ALL R_PARENTIS .)


state 56

    (8) ADDITIONAL_CLAUSES -> JOIN_C ADDITIONAL_CLAUSES .

    END             reduce using rule 8 (ADDITIONAL_CLAUSES -> JOIN_C ADDITIONAL_CLAUSES .)
    R_PARENTIS      reduce using rule 8 (ADDITIONAL_CLAUSES -> JOIN_C ADDITIONAL_CLAUSES .)


state 57

    (9) ADDITIONAL_CLAUSES -> WHERE_C ADDITIONAL_CLAUSES .

    END             reduce using rule 9 (ADDITIONAL_CLAUSES -> WHERE_C ADDITIONAL_CLAUSES .)
    R_PARENTIS      reduce using rule 9 (ADDITIONAL_CLAUSES -> WHERE_C ADDITIONAL_CLAUSES .)


state 58

    (10) ADDITIONAL_CLAUSES -> GROUP_BY_C ADDITIONAL_CLAUSES .

    END             reduce using rule 10 (ADDITIONAL_CLAUSES -> GROUP_BY_C ADDITIONAL_CLAUSES .)
    R_PARENTIS      reduce using rule 10 (ADDITIONAL_CLAUSES -> GROUP_BY_C ADDITIONAL_CLAUSES .)


state 59

    (11) ADDITIONAL_CLAUSES -> HAVING_C ADDITIONAL_CLAUSES .

    END             reduce using rule 11 (ADDITIONAL_CLAUSES -> HAVING_C ADDITIONAL_CLAUSES .)
    R_PARENTIS      reduce using rule 11 (ADDITIONAL_CLAUSES -> HAVING_C ADDITIONAL_CLAUSES .)


state 60

    (12) ADDITIONAL_CLAUSES -> ORDER_BY_C ADDITIONAL_CLAUSES .

    END             reduce using rule 12 (ADDITIONAL_CLAUSES -> ORDER_BY_C ADDITIONAL_CLAUSES .)
    R_PARENTIS      reduce using rule 12 (ADDITIONAL_CLAUSES -> ORDER_BY_C ADDITIONAL_CLAUSES .)


state 61

    (13) ADDITIONAL_CLAUSES -> LIMIT_C ADDITIONAL_CLAUSES .

    END             reduce using rule 13 (ADDITIONAL_CLAUSES -> LIMIT_C ADDITIONAL_CLAUSES .)
    R_PARENTIS      reduce using rule 13 (ADDITIONAL_CLAUSES -> LIMIT_C ADDITIONAL_CLAUSES .)


state 62

    (14) ADDITIONAL_CLAUSES -> OFFSET_C ADDITIONAL_CLAUSES .

    END             reduce using rule 14 (ADDITIONAL_CLAUSES -> OFFSET_C ADDITIONAL_CLAUSES .)
    R_PARENTIS      reduce using rule 14 (ADDITIONAL_CLAUSES -> OFFSET_C ADDITIONAL_CLAUSES .)


state 63

    (22) JOIN_C -> INNER JOIN_C .

    INNER           reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    LEFT            reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    RIGHT           reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    FULL            reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    OUTER           reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    JOIN            reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    ON              reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    WHERE           reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    GROUP           reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    HAVING          reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    ORDER           reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    LIMIT           reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    OFFSET          reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    END             reduce using rule 22 (JOIN_C -> INNER JOIN_C .)
    R_PARENTIS      reduce using rule 22 (JOIN_C -> INNER JOIN_C .)


state 64

    (23) JOIN_C -> LEFT JOIN_C .

    INNER           reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    LEFT            reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    RIGHT           reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    FULL            reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    OUTER           reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    JOIN            reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    ON              reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    WHERE           reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    GROUP           reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    HAVING          reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    ORDER           reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    LIMIT           reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    OFFSET          reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    END             reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)
    R_PARENTIS      reduce using rule 23 (JOIN_C -> LEFT JOIN_C .)


state 65

    (24) JOIN_C -> RIGHT JOIN_C .

    INNER           reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    LEFT            reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    RIGHT           reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    FULL            reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    OUTER           reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    JOIN            reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    ON              reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    WHERE           reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    GROUP           reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    HAVING          reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    ORDER           reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    LIMIT           reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    OFFSET          reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    END             reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)
    R_PARENTIS      reduce using rule 24 (JOIN_C -> RIGHT JOIN_C .)


state 66

    (25) JOIN_C -> FULL JOIN_C .

    INNER           reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    LEFT            reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    RIGHT           reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    FULL            reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    OUTER           reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    JOIN            reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    ON              reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    WHERE           reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    GROUP           reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    HAVING          reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    ORDER           reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    LIMIT           reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    OFFSET          reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    END             reduce using rule 25 (JOIN_C -> FULL JOIN_C .)
    R_PARENTIS      reduce using rule 25 (JOIN_C -> FULL JOIN_C .)


state 67

    (26) JOIN_C -> OUTER JOIN_C .

    INNER           reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    LEFT            reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    RIGHT           reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    FULL            reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    OUTER           reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    JOIN            reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    ON              reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    WHERE           reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    GROUP           reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    HAVING          reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    ORDER           reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    LIMIT           reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    OFFSET          reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    END             reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)
    R_PARENTIS      reduce using rule 26 (JOIN_C -> OUTER JOIN_C .)


state 68

    (27) JOIN_C -> JOIN ARGS . JOIN_C
    (44) ARGS -> ARGS . COMMA VARIABLE
    (45) ARGS -> ARGS . VARIABLE
    (22) JOIN_C -> . INNER JOIN_C
    (23) JOIN_C -> . LEFT JOIN_C
    (24) JOIN_C -> . RIGHT JOIN_C
    (25) JOIN_C -> . FULL JOIN_C
    (26) JOIN_C -> . OUTER JOIN_C
    (27) JOIN_C -> . JOIN ARGS JOIN_C
    (28) JOIN_C -> . ON VARIABLE
    (29) JOIN_C -> . ON VARIABLE EQUAL VARIABLE

    COMMA           shift and go to state 18
    VARIABLE        shift and go to state 19
    INNER           shift and go to state 41
    LEFT            shift and go to state 42
    RIGHT           shift and go to state 43
    FULL            shift and go to state 44
    OUTER           shift and go to state 45
    JOIN            shift and go to state 46
    ON              shift and go to state 47

    JOIN_C                         shift and go to state 78

state 69

    (28) JOIN_C -> ON VARIABLE .
    (29) JOIN_C -> ON VARIABLE . EQUAL VARIABLE

    INNER           reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    LEFT            reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    RIGHT           reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    FULL            reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    OUTER           reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    JOIN            reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    ON              reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    WHERE           reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    GROUP           reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    HAVING          reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    ORDER           reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    LIMIT           reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    OFFSET          reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    END             reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    R_PARENTIS      reduce using rule 28 (JOIN_C -> ON VARIABLE .)
    EQUAL           shift and go to state 79


state 70

    (30) WHERE_C -> WHERE CONDITION .

    INNER           reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    LEFT            reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    RIGHT           reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    FULL            reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    OUTER           reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    JOIN            reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    ON              reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    WHERE           reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    GROUP           reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    HAVING          reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    ORDER           reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    LIMIT           reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    OFFSET          reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    END             reduce using rule 30 (WHERE_C -> WHERE CONDITION .)
    R_PARENTIS      reduce using rule 30 (WHERE_C -> WHERE CONDITION .)


state 71

    (32) CONDITION -> VARIABLE . OPERATOR MATCH
    (52) OPERATOR -> . LESS
    (53) OPERATOR -> . MORE
    (54) OPERATOR -> . EQUAL
    (55) OPERATOR -> . NOT_EQUAL
    (56) OPERATOR -> . MORE_EQ
    (57) OPERATOR -> . LESS_EQ
    (58) OPERATOR -> . BETWEEN
    (59) OPERATOR -> . LIKE
    (60) OPERATOR -> . IN
    (61) OPERATOR -> . REGEX

    LESS            shift and go to state 81
    MORE            shift and go to state 82
    EQUAL           shift and go to state 83
    NOT_EQUAL       shift and go to state 84
    MORE_EQ         shift and go to state 85
    LESS_EQ         shift and go to state 86
    BETWEEN         shift and go to state 87
    LIKE            shift and go to state 88
    IN              shift and go to state 89
    REGEX           shift and go to state 90

    OPERATOR                       shift and go to state 80

state 72

    (36) GROUP_BY_C -> GROUP BY . VARIABLE

    VARIABLE        shift and go to state 91


state 73

    (31) HAVING_C -> HAVING CONDITION .

    INNER           reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    LEFT            reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    RIGHT           reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    FULL            reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    OUTER           reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    JOIN            reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    ON              reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    WHERE           reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    GROUP           reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    HAVING          reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    ORDER           reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    LIMIT           reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    OFFSET          reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    END             reduce using rule 31 (HAVING_C -> HAVING CONDITION .)
    R_PARENTIS      reduce using rule 31 (HAVING_C -> HAVING CONDITION .)


state 74

    (38) ORDER_BY_C -> ORDER BY . VARIABLE
    (39) ORDER_BY_C -> ORDER BY . VARIABLE DESC
    (40) ORDER_BY_C -> ORDER BY . VARIABLE ASC
    (41) ORDER_BY_C -> ORDER BY . NEWID_C
    (62) NEWID_C -> . NEWID L_PARENTIS R_PARENTIS

    VARIABLE        shift and go to state 92
    NEWID           shift and go to state 94

    NEWID_C                        shift and go to state 93

state 75

    (42) LIMIT_C -> LIMIT NUMBER .

    INNER           reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    LEFT            reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    RIGHT           reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    FULL            reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    OUTER           reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    JOIN            reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    ON              reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    WHERE           reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    GROUP           reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    HAVING          reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    ORDER           reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    LIMIT           reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    OFFSET          reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    END             reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)
    R_PARENTIS      reduce using rule 42 (LIMIT_C -> LIMIT NUMBER .)


state 76

    (43) OFFSET_C -> OFFSET NUMBER .

    INNER           reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    LEFT            reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    RIGHT           reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    FULL            reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    OUTER           reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    JOIN            reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    ON              reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    WHERE           reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    GROUP           reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    HAVING          reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    ORDER           reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    LIMIT           reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    OFFSET          reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    END             reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)
    R_PARENTIS      reduce using rule 43 (OFFSET_C -> OFFSET NUMBER .)


state 77

    (37) INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .

    COMMA           reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    VARIABLE        reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    FROM            reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    INNER           reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    LEFT            reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    RIGHT           reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    FULL            reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    OUTER           reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    JOIN            reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    ON              reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    WHERE           reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    GROUP           reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    HAVING          reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    ORDER           reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    LIMIT           reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    OFFSET          reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    END             reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)
    R_PARENTIS      reduce using rule 37 (INNER_SELECT_C -> L_PARENTIS SELECT ARGS FROM_PARSE R_PARENTIS .)


state 78

    (27) JOIN_C -> JOIN ARGS JOIN_C .

    INNER           reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    LEFT            reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    RIGHT           reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    FULL            reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    OUTER           reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    JOIN            reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    ON              reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    WHERE           reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    GROUP           reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    HAVING          reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    ORDER           reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    LIMIT           reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    OFFSET          reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    END             reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)
    R_PARENTIS      reduce using rule 27 (JOIN_C -> JOIN ARGS JOIN_C .)


state 79

    (29) JOIN_C -> ON VARIABLE EQUAL . VARIABLE

    VARIABLE        shift and go to state 95


state 80

    (32) CONDITION -> VARIABLE OPERATOR . MATCH
    (33) MATCH -> . QUOTE ANY QUOTE
    (34) MATCH -> . VARIABLE
    (35) MATCH -> . EMPTY_STRING

    QUOTE           shift and go to state 98
    VARIABLE        shift and go to state 96
    EMPTY_STRING    shift and go to state 99

    MATCH                          shift and go to state 97

state 81

    (52) OPERATOR -> LESS .

    QUOTE           reduce using rule 52 (OPERATOR -> LESS .)
    VARIABLE        reduce using rule 52 (OPERATOR -> LESS .)
    EMPTY_STRING    reduce using rule 52 (OPERATOR -> LESS .)


state 82

    (53) OPERATOR -> MORE .

    QUOTE           reduce using rule 53 (OPERATOR -> MORE .)
    VARIABLE        reduce using rule 53 (OPERATOR -> MORE .)
    EMPTY_STRING    reduce using rule 53 (OPERATOR -> MORE .)


state 83

    (54) OPERATOR -> EQUAL .

    QUOTE           reduce using rule 54 (OPERATOR -> EQUAL .)
    VARIABLE        reduce using rule 54 (OPERATOR -> EQUAL .)
    EMPTY_STRING    reduce using rule 54 (OPERATOR -> EQUAL .)


state 84

    (55) OPERATOR -> NOT_EQUAL .

    QUOTE           reduce using rule 55 (OPERATOR -> NOT_EQUAL .)
    VARIABLE        reduce using rule 55 (OPERATOR -> NOT_EQUAL .)
    EMPTY_STRING    reduce using rule 55 (OPERATOR -> NOT_EQUAL .)


state 85

    (56) OPERATOR -> MORE_EQ .

    QUOTE           reduce using rule 56 (OPERATOR -> MORE_EQ .)
    VARIABLE        reduce using rule 56 (OPERATOR -> MORE_EQ .)
    EMPTY_STRING    reduce using rule 56 (OPERATOR -> MORE_EQ .)


state 86

    (57) OPERATOR -> LESS_EQ .

    QUOTE           reduce using rule 57 (OPERATOR -> LESS_EQ .)
    VARIABLE        reduce using rule 57 (OPERATOR -> LESS_EQ .)
    EMPTY_STRING    reduce using rule 57 (OPERATOR -> LESS_EQ .)


state 87

    (58) OPERATOR -> BETWEEN .

    QUOTE           reduce using rule 58 (OPERATOR -> BETWEEN .)
    VARIABLE        reduce using rule 58 (OPERATOR -> BETWEEN .)
    EMPTY_STRING    reduce using rule 58 (OPERATOR -> BETWEEN .)


state 88

    (59) OPERATOR -> LIKE .

    QUOTE           reduce using rule 59 (OPERATOR -> LIKE .)
    VARIABLE        reduce using rule 59 (OPERATOR -> LIKE .)
    EMPTY_STRING    reduce using rule 59 (OPERATOR -> LIKE .)


state 89

    (60) OPERATOR -> IN .

    QUOTE           reduce using rule 60 (OPERATOR -> IN .)
    VARIABLE        reduce using rule 60 (OPERATOR -> IN .)
    EMPTY_STRING    reduce using rule 60 (OPERATOR -> IN .)


state 90

    (61) OPERATOR -> REGEX .

    QUOTE           reduce using rule 61 (OPERATOR -> REGEX .)
    VARIABLE        reduce using rule 61 (OPERATOR -> REGEX .)
    EMPTY_STRING    reduce using rule 61 (OPERATOR -> REGEX .)


state 91

    (36) GROUP_BY_C -> GROUP BY VARIABLE .

    INNER           reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    LEFT            reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    RIGHT           reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    FULL            reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    OUTER           reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    JOIN            reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    ON              reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    WHERE           reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    GROUP           reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    HAVING          reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    ORDER           reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    LIMIT           reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    OFFSET          reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    END             reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)
    R_PARENTIS      reduce using rule 36 (GROUP_BY_C -> GROUP BY VARIABLE .)


state 92

    (38) ORDER_BY_C -> ORDER BY VARIABLE .
    (39) ORDER_BY_C -> ORDER BY VARIABLE . DESC
    (40) ORDER_BY_C -> ORDER BY VARIABLE . ASC

    INNER           reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    LEFT            reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    RIGHT           reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    FULL            reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    OUTER           reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    JOIN            reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    ON              reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    WHERE           reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    GROUP           reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    HAVING          reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    ORDER           reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    LIMIT           reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    OFFSET          reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    END             reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    R_PARENTIS      reduce using rule 38 (ORDER_BY_C -> ORDER BY VARIABLE .)
    DESC            shift and go to state 100
    ASC             shift and go to state 101


state 93

    (41) ORDER_BY_C -> ORDER BY NEWID_C .

    INNER           reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    LEFT            reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    RIGHT           reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    FULL            reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    OUTER           reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    JOIN            reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    ON              reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    WHERE           reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    GROUP           reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    HAVING          reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    ORDER           reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    LIMIT           reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    OFFSET          reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    END             reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)
    R_PARENTIS      reduce using rule 41 (ORDER_BY_C -> ORDER BY NEWID_C .)


state 94

    (62) NEWID_C -> NEWID . L_PARENTIS R_PARENTIS

    L_PARENTIS      shift and go to state 102


state 95

    (29) JOIN_C -> ON VARIABLE EQUAL VARIABLE .

    INNER           reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    LEFT            reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    RIGHT           reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    FULL            reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    OUTER           reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    JOIN            reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    ON              reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    WHERE           reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    GROUP           reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    HAVING          reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    ORDER           reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    LIMIT           reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    OFFSET          reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    END             reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)
    R_PARENTIS      reduce using rule 29 (JOIN_C -> ON VARIABLE EQUAL VARIABLE .)


state 96

    (34) MATCH -> VARIABLE .

    INNER           reduce using rule 34 (MATCH -> VARIABLE .)
    LEFT            reduce using rule 34 (MATCH -> VARIABLE .)
    RIGHT           reduce using rule 34 (MATCH -> VARIABLE .)
    FULL            reduce using rule 34 (MATCH -> VARIABLE .)
    OUTER           reduce using rule 34 (MATCH -> VARIABLE .)
    JOIN            reduce using rule 34 (MATCH -> VARIABLE .)
    ON              reduce using rule 34 (MATCH -> VARIABLE .)
    WHERE           reduce using rule 34 (MATCH -> VARIABLE .)
    GROUP           reduce using rule 34 (MATCH -> VARIABLE .)
    HAVING          reduce using rule 34 (MATCH -> VARIABLE .)
    ORDER           reduce using rule 34 (MATCH -> VARIABLE .)
    LIMIT           reduce using rule 34 (MATCH -> VARIABLE .)
    OFFSET          reduce using rule 34 (MATCH -> VARIABLE .)
    END             reduce using rule 34 (MATCH -> VARIABLE .)
    R_PARENTIS      reduce using rule 34 (MATCH -> VARIABLE .)


state 97

    (32) CONDITION -> VARIABLE OPERATOR MATCH .

    INNER           reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    LEFT            reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    RIGHT           reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    FULL            reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    OUTER           reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    JOIN            reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    ON              reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    WHERE           reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    GROUP           reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    HAVING          reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    ORDER           reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    LIMIT           reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    OFFSET          reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    END             reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)
    R_PARENTIS      reduce using rule 32 (CONDITION -> VARIABLE OPERATOR MATCH .)


state 98

    (33) MATCH -> QUOTE . ANY QUOTE

    ANY             shift and go to state 103


state 99

    (35) MATCH -> EMPTY_STRING .

    INNER           reduce using rule 35 (MATCH -> EMPTY_STRING .)
    LEFT            reduce using rule 35 (MATCH -> EMPTY_STRING .)
    RIGHT           reduce using rule 35 (MATCH -> EMPTY_STRING .)
    FULL            reduce using rule 35 (MATCH -> EMPTY_STRING .)
    OUTER           reduce using rule 35 (MATCH -> EMPTY_STRING .)
    JOIN            reduce using rule 35 (MATCH -> EMPTY_STRING .)
    ON              reduce using rule 35 (MATCH -> EMPTY_STRING .)
    WHERE           reduce using rule 35 (MATCH -> EMPTY_STRING .)
    GROUP           reduce using rule 35 (MATCH -> EMPTY_STRING .)
    HAVING          reduce using rule 35 (MATCH -> EMPTY_STRING .)
    ORDER           reduce using rule 35 (MATCH -> EMPTY_STRING .)
    LIMIT           reduce using rule 35 (MATCH -> EMPTY_STRING .)
    OFFSET          reduce using rule 35 (MATCH -> EMPTY_STRING .)
    END             reduce using rule 35 (MATCH -> EMPTY_STRING .)
    R_PARENTIS      reduce using rule 35 (MATCH -> EMPTY_STRING .)


state 100

    (39) ORDER_BY_C -> ORDER BY VARIABLE DESC .

    INNER           reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    LEFT            reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    RIGHT           reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    FULL            reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    OUTER           reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    JOIN            reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    ON              reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    WHERE           reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    GROUP           reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    HAVING          reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    ORDER           reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    LIMIT           reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    OFFSET          reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    END             reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)
    R_PARENTIS      reduce using rule 39 (ORDER_BY_C -> ORDER BY VARIABLE DESC .)


state 101

    (40) ORDER_BY_C -> ORDER BY VARIABLE ASC .

    INNER           reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    LEFT            reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    RIGHT           reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    FULL            reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    OUTER           reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    JOIN            reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    ON              reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    WHERE           reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    GROUP           reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    HAVING          reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    ORDER           reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    LIMIT           reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    OFFSET          reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    END             reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)
    R_PARENTIS      reduce using rule 40 (ORDER_BY_C -> ORDER BY VARIABLE ASC .)


state 102

    (62) NEWID_C -> NEWID L_PARENTIS . R_PARENTIS

    R_PARENTIS      shift and go to state 104


state 103

    (33) MATCH -> QUOTE ANY . QUOTE

    QUOTE           shift and go to state 105


state 104

    (62) NEWID_C -> NEWID L_PARENTIS R_PARENTIS .

    INNER           reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    LEFT            reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    RIGHT           reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    FULL            reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    OUTER           reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    JOIN            reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    ON              reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    WHERE           reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    GROUP           reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    HAVING          reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    ORDER           reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    LIMIT           reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    OFFSET          reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    END             reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)
    R_PARENTIS      reduce using rule 62 (NEWID_C -> NEWID L_PARENTIS R_PARENTIS .)


state 105

    (33) MATCH -> QUOTE ANY QUOTE .

    INNER           reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    LEFT            reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    RIGHT           reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    FULL            reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    OUTER           reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    JOIN            reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    ON              reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    WHERE           reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    GROUP           reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    HAVING          reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    ORDER           reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    LIMIT           reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    OFFSET          reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    END             reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)
    R_PARENTIS      reduce using rule 33 (MATCH -> QUOTE ANY QUOTE .)

